// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_scanner_registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IStakeSubjectStakeThreshold is an auto generated low-level Go binding around an user-defined struct.
type IStakeSubjectStakeThreshold struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
}

// ScannerRegistryMetaData contains all meta data concerning the ScannerRegistry contract.
var ScannerRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ManagerEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ScannerEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ScannerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newstakeController\",\"type\":\"address\"}],\"name\":\"StakeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"StakeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"adminRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"adminUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"disableScanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"enableScanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getManagerAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getManagerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScanner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScannerChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScannerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeController\",\"outputs\":[{\"internalType\":\"contractIStakeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"getStakeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"isStakedOverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"}],\"name\":\"scannerAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeController\",\"type\":\"address\"}],\"name\":\"setStakeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"newStakeThreshold\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"setStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b506040516200495838038062004958833981016040819052620000389162000105565b6001600160a01b038116608052600054610100900460ff16806200005f575060005460ff16155b620000c75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000ea576000805461ffff19166101011790555b8015620000fd576000805461ff00191690555b505062000137565b6000602082840312156200011857600080fd5b81516001600160a01b03811681146200013057600080fd5b9392505050565b60805160a0516147df6200017960003960008181610edc01528181610f610152818161117501526111fa01526000818161054d0152613ba101526147df6000f3fe6080604052600436106102d15760003560e01c806370a0823111610179578063aebb5150116100d6578063c783034c1161008a578063e11cf71e11610064578063e11cf71e14610899578063e985e9c5146108b9578063f11b1b881461090357600080fd5b8063c783034c14610839578063c87b56dd14610859578063c95808041461087957600080fd5b8063b88d4fde116100bb578063b88d4fde146107d9578063c0d78655146107f9578063c2dae01d1461081957600080fd5b8063aebb51501461079a578063b7b57b27146107b957600080fd5b80639a9d67bd1161012d578063a9032e7b11610112578063a9032e7b1461071d578063a97fe43e1461073d578063ac9650d81461076d57600080fd5b80639a9d67bd146106dd578063a22cb465146106fd57600080fd5b806382fe1bcc1161015e57806382fe1bcc146106815780638e79a369146106a857806395d89b41146106c857600080fd5b806370a0823114610641578063773ed13c1461066157600080fd5b806342842e0e11610232578063572b6c05116101e65780635a74fc29116101c05780635a74fc29146105bd578063624ade3c146105dd5780636352211e1461062157600080fd5b8063572b6c0514610530578063579a69881461057d578063592382971461059d57600080fd5b80634f1ef286116102175780634f1ef286146104985780635109c479146104ab57806354fd4d50146104e757600080fd5b806342842e0e146104585780634629f4271461047857600080fd5b806323b872dd116102895780633121db1c1161026e5780633121db1c146103e75780633659cfe61461040757806337fea0e01461042757600080fd5b806323b872dd146103a75780632a91fb34146103c757600080fd5b8063081812fc116102ba578063081812fc1461032d578063095ea7b3146103655780632016a0d21461038757600080fd5b806301ffc9a7146102d657806306fdde031461030b575b600080fd5b3480156102e257600080fd5b506102f66102f1366004613caf565b610923565b60405190151581526020015b60405180910390f35b34801561031757600080fd5b506103206109a7565b6040516103029190613d24565b34801561033957600080fd5b5061034d610348366004613d37565b610a3a565b6040516001600160a01b039091168152602001610302565b34801561037157600080fd5b50610385610380366004613d65565b610ad6565b005b34801561039357600080fd5b506103856103a2366004613dda565b610c1a565b3480156103b357600080fd5b506103856103c2366004613e6f565b610d60565b3480156103d357600080fd5b506103856103e2366004613eb0565b610dee565b3480156103f357600080fd5b50610385610402366004613f23565b610e86565b34801561041357600080fd5b50610385610422366004613f78565b610ed1565b34801561043357600080fd5b50610447610442366004613d37565b61104d565b604051610302959493929190613f95565b34801561046457600080fd5b50610385610473366004613e6f565b611088565b34801561048457600080fd5b50610385610493366004613fd9565b6110a3565b6103856104a63660046140b0565b61116a565b3480156104b757600080fd5b506104d96104c6366004613d37565b6000908152610227602052604090205490565b604051908152602001610302565b3480156104f357600080fd5b506103206040518060400160405280600581526020017f302e312e3100000000000000000000000000000000000000000000000000000081525081565b34801561053c57600080fd5b506102f661054b366004613f78565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561058957600080fd5b506102f6610598366004613d37565b6112d3565b3480156105a957600080fd5b506103856105b8366004613fd9565b6112f3565b3480156105c957600080fd5b506103856105d836600461410e565b611315565b3480156105e957600080fd5b506105fd6105f8366004613d37565b611417565b60408051825181526020808401519082015291810151151590820152606001610302565b34801561062d57600080fd5b5061034d61063c366004613d37565b611446565b34801561064d57600080fd5b506104d961065c366004613f78565b6114d2565b34801561066d57600080fd5b506102f661067c366004614150565b61156d565b34801561068d57600080fd5b506104d961069c366004613f78565b6001600160a01b031690565b3480156106b457600080fd5b5061034d6106c3366004614175565b61158d565b3480156106d457600080fd5b506103206115a6565b3480156106e957600080fd5b506103856106f8366004613f78565b6115b6565b34801561070957600080fd5b50610385610718366004614197565b6115da565b34801561072957600080fd5b506103856107383660046141c5565b6115ec565b34801561074957600080fd5b5061075d610758366004613d37565b6116df565b60405161030294939291906141f6565b34801561077957600080fd5b5061078d610788366004614226565b6117d5565b604051610302919061429b565b3480156107a657600080fd5b50610191546001600160a01b031661034d565b3480156107c557600080fd5b506102f66107d4366004613d37565b6118ca565b3480156107e557600080fd5b506103856107f43660046142fd565b6118d5565b34801561080557600080fd5b50610385610814366004613f78565b611964565b34801561082557600080fd5b50610385610834366004614369565b611a21565b34801561084557600080fd5b506102f6610854366004613d37565b611ac7565b34801561086557600080fd5b50610320610874366004613d37565b611b06565b34801561088557600080fd5b50610385610894366004613f78565b611bfc565b3480156108a557600080fd5b506104d96108b4366004613d37565b611cba565b3480156108c557600080fd5b506102f66108d43660046143c5565b6001600160a01b0391821660009081526101646020908152604080832093909416825291909152205460ff1690565b34801561090f57600080fd5b5061038561091e366004614369565b611cd2565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061098657506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606061015f80546109b7906143f3565b80601f01602080910402602001604051908101604052809291908181526020018280546109e3906143f3565b8015610a305780601f10610a0557610100808354040283529160200191610a30565b820191906000526020600020905b815481529060010190602001808311610a1357829003601f168201915b5050505050905090565b600081815261016160205260408120546001600160a01b0316610ab95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815261016360205260409020546001600160a01b031690565b6000610ae182611446565b9050806001600160a01b0316836001600160a01b03161415610b6b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610ab0565b806001600160a01b0316610b7d611d35565b6001600160a01b03161480610b995750610b99816108d4611d35565b610c0b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ab0565b610c158383611d44565b505050565b600054610100900460ff1680610c33575060005460ff16155b610c965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff16158015610cb8576000805461ffff19166101011790555b610cc187611db3565b610cca86611f05565b610cd2612056565b610d4585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061211892505050565b8015610d57576000805461ff00191690555b50505050505050565b610d71610d6b611d35565b826121e6565b610de35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ab0565b610c158383836122df565b7fbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a610e2081610e1b611d35565b6124af565b610e715780610e2d611d35565b6040517f75000dc000000000000000000000000000000000000000000000000000000000815260048101929092526001600160a01b03166024820152604401610ab0565b610e7e868686868661254d565b505050505050565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a610eb381610e1b611d35565b610ec05780610e2d611d35565b610ecb848484612579565b50505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f5f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ab0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fba7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146110255760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ab0565b61102e816126a8565b6040805160008082526020820190925261104a918391906126e2565b50565b60008060006060600061105f866116df565b92975090955093509150848484846110768a611ac7565b939a9299509097509550909350915050565b610c15838383604051806020016040528060008152506118d5565b6110ac8261288a565b6110e5576040517f16b7494700000000000000000000000000000000000000000000000000000000815260048101839052602401610ab0565b6110ef8282612970565b61115a576110fb611d35565b81600481111561110d5761110d61442e565b6040517fe5f41d760000000000000000000000000000000000000000000000000000000081526001600160a01b03909216600483015260ff16602482015260448101839052606401610ab0565b61116682826001612a55565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111f85760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ab0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112537f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146112be5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ab0565b6112c7826126a8565b611166828260016126e2565b600081815261016160205260408120546001600160a01b031615156109a1565b6112fd8282612970565b611309576110fb611d35565b61116682826000612a55565b8261131f81611446565b6001600160a01b0316611330611d35565b6001600160a01b03161461138b57611346611d35565b6040517f871d7af30000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101829052604401610ab0565b81156113b05760008481526101c3602052604090206113aa9084612a6b565b506113cb565b60008481526101c3602052604090206113c99084612a80565b505b826001600160a01b0316847f538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e84604051611409911515815260200190565b60405180910390a350505050565b61143d604051806060016040528060008152602001600081526020016000151581525090565b6109a182612a95565b600081815261016160205260408120546001600160a01b0316806109a15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ab0565b60006001600160a01b0382166115505760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ab0565b506001600160a01b03166000908152610162602052604090205490565b60008281526101c3602052604081206115869083612ac4565b9392505050565b60008281526101c3602052604081206115869083612ae6565b606061016080546109b7906143f3565b60006115c481610e1b611d35565b6115d15780610e2d611d35565b61116682612af2565b6111666115e5611d35565b8383612b94565b7fbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a61161981610e1b611d35565b6116265780610e2d611d35565b8235602084013511611664576040517fb298dff400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b817f52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def8435602086013561169d6060880160408901614444565b60408051938452602084019290925215159082015260600160405180910390a260008281526101966020526040902083906116d88282614461565b5050505050565b60008060006060600061170a86600090815261016160205260409020546001600160a01b0316151590565b90508081611719576000611722565b61172287611446565b6000888152610227602052604090208054600190910180548190611745906143f3565b80601f0160208091040260200160405190810160405280929190818152602001828054611771906143f3565b80156117be5780601f10611793576101008083540402835291602001916117be565b820191906000526020600020905b8154815290600101906020018083116117a157829003601f168201915b505050505090509450945094509450509193509193565b60608167ffffffffffffffff8111156117f0576117f061400d565b60405190808252806020026020018201604052801561182357816020015b606081526020019060019003908161180e5790505b50905060005b828110156118c3576118933085858481811061184757611847614497565b905060200281019061185991906144ad565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c6592505050565b8282815181106118a5576118a5614497565b602002602001018190525080806118bb9061450a565b915050611829565b5092915050565b60006109a18261288a565b6118e66118e0611d35565b836121e6565b6119585760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ab0565b610ecb84848484612c8a565b600061197281610e1b611d35565b61197f5780610e2d611d35565b6001600160a01b0382166119d65760405163eac0d38960e01b815260206004820152600960248201527f6e6577526f7574657200000000000000000000000000000000000000000000006044820152606401610ab0565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a25050565b7fbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a611a4e81610e1b611d35565b611a5b5780610e2d611d35565b6001600160a01b038516611a6e816112d3565b611aaf576040517f1cc39a1f0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602401610ab0565b611abb81868686612d13565b610e7e81868686612d1f565b6000611ad2826112d3565b8015611af6575060008281526101f560209081526040808320838052909152902054155b80156109a157506109a18261288a565b600081815261016160205260409020546060906001600160a01b0316611b945760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610ab0565b6000611bab60408051602081019091526000815290565b90506000815111611bcb5760405180602001604052806000815250611586565b80611bd584612d81565b604051602001611be6929190614525565b6040516020818303038152906040529392505050565b6000611c0a81610e1b611d35565b611c175780610e2d611d35565b611c316001600160a01b038316637965db0b60e01b612eb3565b611c6f576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610ab0565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b60008181526101c3602052604081206109a190612ecf565b6000838152610196602052604090206002015460ff16611d21576040517f2fc84fae00000000000000000000000000000000000000000000000000000000815260048101849052602401610ab0565b610ecb611d2c611d35565b8585858561254d565b6000611d3f612ed9565b905090565b60008181526101636020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d7a82611446565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff1680611dcc575060005460ff16155b611e2f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff16158015611e51576000805461ffff19166101011790555b611e6b6001600160a01b038316637965db0b60e01b612eb3565b611ea9576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610ab0565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015611166576000805461ff00191690555050565b600054610100900460ff1680611f1e575060005460ff16155b611f815760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff16158015611fa3576000805461ffff19166101011790555b6001600160a01b038216611ffa5760405163eac0d38960e01b815260206004820152600660248201527f726f7574657200000000000000000000000000000000000000000000000000006044820152606401610ab0565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a28015611166576000805461ff00191690555050565b600054610100900460ff168061206f575060005460ff16155b6120d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff161580156120f4576000805461ffff19166101011790555b6120fc612ee3565b612104612ee3565b801561104a576000805461ff001916905550565b600054610100900460ff1680612131575060005460ff16155b6121945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff161580156121b6576000805461ffff19166101011790555b6121be612ee3565b6121c6612ee3565b6121d08383612f94565b8015610c15576000805461ff0019169055505050565b600081815261016160205260408120546001600160a01b03166122605760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ab0565b600061226b83611446565b9050806001600160a01b0316846001600160a01b031614806122a65750836001600160a01b031661229b84610a3a565b6001600160a01b0316145b806122d757506001600160a01b038082166000908152610164602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166122f282611446565b6001600160a01b03161461236e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610ab0565b6001600160a01b0382166123e95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ab0565b6123f4600082611d44565b6001600160a01b03831660009081526101626020526040812080546001929061241e908490614554565b90915550506001600160a01b03821660009081526101626020526040812080546001929061244d90849061456b565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6033546040517f91d14854000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b15801561251557600080fd5b505afa158015612529573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115869190614583565b6001600160a01b0385166125618582613072565b61256d81858585612d13565b610e7e81858585612d1f565b6040517f02571be30000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b1580156125f157600080fd5b505afa158015612605573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262991906145a0565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b81526004016126569291906145e6565b602060405180830381600087803b15801561267057600080fd5b505af1158015612684573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecb91906145fa565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36126d581610e1b611d35565b6111665780610e2d611d35565b60006127157f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b9050612720846131b7565b60008351118061272d5750815b1561273e5761273c848461326c565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166116d857805460ff191660011781556040516001600160a01b03831660248201526127d690869060440160408051601f198184030181529190526020810180516001600160e01b03167f3659cfe60000000000000000000000000000000000000000000000000000000017905261326c565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b038381169116146128815760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f75727468657220757067726164657300000000000000000000000000000000006064820152608401610ab0565b6116d885613357565b6000806128a0610191546001600160a01b031690565b6001600160a01b031614156128b757506001919050565b6128c082612a95565b51610191546001600160a01b03166040517fa290bf3800000000000000000000000000000000000000000000000000000000815260006004820152602481018590526001600160a01b03919091169063a290bf389060440160206040518083038186803b15801561293057600080fd5b505afa158015612944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296891906145fa565b101592915050565b6000808260048111156129855761298561442e565b14156129be576129b77fbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a610e1b611d35565b90506109a1565b60018260048111156129d2576129d261442e565b14156129f257826129e1611d35565b6001600160a01b03161490506109a1565b6002826004811115612a0657612a0661442e565b1415612a2657612a1583611446565b6001600160a01b03166129e1611d35565b6003826004811115612a3a57612a3a61442e565b1415612a4c576129b78361067c611d35565b50600092915050565b612a60838383613397565b610c15838383613403565b6000611586836001600160a01b03841661347f565b6000611586836001600160a01b0384166134ce565b612abb604051806060016040528060008152602001600081526020016000151581525090565b6109a1826135c1565b6001600160a01b03811660009081526001830160205260408120541515611586565b60006115868383613631565b6001600160a01b038116612b495760405163eac0d38960e01b815260206004820152600f60248201527f7374616b65436f6e74726f6c6c657200000000000000000000000000000000006044820152606401610ab0565b61019180546001600160a01b0319166001600160a01b0383169081179091556040517fcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f0090600090a250565b816001600160a01b0316836001600160a01b03161415612bf65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ab0565b6001600160a01b0383811660008181526101646020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b606061158683836040518060600160405280602781526020016147836027913961365b565b612c958484846122df565b612ca18484848461372f565b610ecb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ab0565b610ecb848484846138b2565b610ecb84848484604051602401612d399493929190614613565b60408051601f198184030181529190526020810180516001600160e01b03167f7755ccc000000000000000000000000000000000000000000000000000000000179052613935565b606081612dc157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612deb5780612dd58161450a565b9150612de49050600a83614649565b9150612dc5565b60008167ffffffffffffffff811115612e0657612e0661400d565b6040519080825280601f01601f191660200182016040528015612e30576020820181803683370190505b5090505b84156122d757612e45600183614554565b9150612e52600a8661465d565b612e5d90603061456b565b60f81b818381518110612e7257612e72614497565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612eac600a86614649565b9450612e34565b6000612ebe836139c1565b8015611586575061158683836139f4565b60006109a1825490565b6000611d3f613ad3565b600054610100900460ff1680612efc575060005460ff16155b612f5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff16158015612104576000805461ffff1916610101179055801561104a576000805461ff001916905550565b600054610100900460ff1680612fad575060005460ff16155b6130105760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ab0565b600054610100900460ff16158015613032576000805461ffff19166101011790555b82516130469061015f906020860190613c00565b50815161305b90610160906020850190613c00565b508015610c15576000805461ff0019169055505050565b6001600160a01b0382166130c85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ab0565b600081815261016160205260409020546001600160a01b03161561312e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ab0565b6001600160a01b03821660009081526101626020526040812080546001929061315890849061456b565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b803b61322b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610ab0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6132cb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ab0565b600080846001600160a01b0316846040516132e69190614671565b600060405180830381855af49150503d8060008114613321576040519150601f19603f3d011682016040523d82523d6000602084013e613326565b606091505b509150915061334e828260405180606001604052806027815260200161478360279139613add565b95945050505050565b613360816131b7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6133c68260048111156133ac576133ac61442e565b60008581526101f5602052604090209060ff168315613b16565b6133cf83611ac7565b1515837fcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d48484604051612c5892919061468d565b610c15838360048111156134195761341961442e565b604051602481019290925260ff166044820152821515606482015260840160408051601f198184030181529190526020810180516001600160e01b03167f998cce0b00000000000000000000000000000000000000000000000000000000179052613935565b60008181526001830160205260408120546134c6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109a1565b5060006109a1565b600081815260018301602052604081205480156135b75760006134f2600183614554565b855490915060009061350690600190614554565b905081811461356b57600086600001828154811061352657613526614497565b906000526020600020015490508087600001848154811061354957613549614497565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061357c5761357c6146be565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109a1565b60009150506109a1565b6135e7604051806060016040528060008152602001600081526020016000151581525090565b506000908152610227602090815260408083205483526101968252918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b600082600001828154811061364857613648614497565b9060005260206000200154905092915050565b6060833b6136ba5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ab0565b600080856001600160a01b0316856040516136d59190614671565b600060405180830381855af49150503d8060008114613710576040519150601f19603f3d011682016040523d82523d6000602084013e613715565b606091505b5091509150613725828286613add565b9695505050505050565b60006001600160a01b0384163b156138a757836001600160a01b031663150b7a02613758611d35565b8786866040518563ffffffff1660e01b815260040161377a94939291906146d4565b602060405180830381600087803b15801561379457600080fd5b505af19250505080156137c4575060408051601f3d908101601f191682019092526137c191810190614706565b60015b613874573d8080156137f2576040519150601f19603f3d011682016040523d82523d6000602084013e6137f7565b606091505b50805161386c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ab0565b805181602001fd5b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001490506122d7565b506001949350505050565b6138be84848484613b65565b604051806040016040528084815260200183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508681526102276020908152604090912083518155838201518051919350610d57926001850192910190613c00565b6065546001600160a01b03161561104a576065546040517f3fa222c40000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633fa222c49061398f908490600401613d24565b600060405180830381600087803b1580156139a957600080fd5b505af19250505080156139ba575060015b61104a5750565b60006139d4826301ffc9a760e01b6139f4565b80156109a157506139ed826001600160e01b03196139f4565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090613a5b908690614671565b6000604051808303818686fa925050503d8060008114613a97576040519150601f19603f3d011682016040523d82523d6000602084013e613a9c565b606091505b5091509150602081511015613ab757600093505050506109a1565b8180156137255750808060200190518101906137259190614583565b6000611d3f613b98565b60608315613aec575081611586565b825115613afc5782518084602001fd5b8160405162461bcd60e51b8152600401610ab09190613d24565b8015613b4057600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b82847f72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d84846040516114099291906145e6565b6000611d3f60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415613bfb57600036613bde601482614554565b613bea92369290614723565b613bf39161474d565b60601c905090565b503390565b828054613c0c906143f3565b90600052602060002090601f016020900481019282613c2e5760008555613c74565b82601f10613c4757805160ff1916838001178555613c74565b82800160010185558215613c74579182015b82811115613c74578251825591602001919060010190613c59565b50613c80929150613c84565b5090565b5b80821115613c805760008155600101613c85565b6001600160e01b03198116811461104a57600080fd5b600060208284031215613cc157600080fd5b813561158681613c99565b60005b83811015613ce7578181015183820152602001613ccf565b83811115610ecb5750506000910152565b60008151808452613d10816020860160208601613ccc565b601f01601f19169290920160200192915050565b6020815260006115866020830184613cf8565b600060208284031215613d4957600080fd5b5035919050565b6001600160a01b038116811461104a57600080fd5b60008060408385031215613d7857600080fd5b8235613d8381613d50565b946020939093013593505050565b60008083601f840112613da357600080fd5b50813567ffffffffffffffff811115613dbb57600080fd5b602083019150836020828501011115613dd357600080fd5b9250929050565b60008060008060008060808789031215613df357600080fd5b8635613dfe81613d50565b95506020870135613e0e81613d50565b9450604087013567ffffffffffffffff80821115613e2b57600080fd5b613e378a838b01613d91565b90965094506060890135915080821115613e5057600080fd5b50613e5d89828a01613d91565b979a9699509497509295939492505050565b600080600060608486031215613e8457600080fd5b8335613e8f81613d50565b92506020840135613e9f81613d50565b929592945050506040919091013590565b600080600080600060808688031215613ec857600080fd5b8535613ed381613d50565b94506020860135613ee381613d50565b935060408601359250606086013567ffffffffffffffff811115613f0657600080fd5b613f1288828901613d91565b969995985093965092949392505050565b600080600060408486031215613f3857600080fd5b8335613f4381613d50565b9250602084013567ffffffffffffffff811115613f5f57600080fd5b613f6b86828701613d91565b9497909650939450505050565b600060208284031215613f8a57600080fd5b813561158681613d50565b85151581526001600160a01b038516602082015283604082015260a060608201526000613fc560a0830185613cf8565b905082151560808301529695505050505050565b60008060408385031215613fec57600080fd5b8235915060208301356005811061400257600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261403457600080fd5b813567ffffffffffffffff8082111561404f5761404f61400d565b604051601f8301601f19908116603f011681019082821181831017156140775761407761400d565b8160405283815286602085880101111561409057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156140c357600080fd5b82356140ce81613d50565b9150602083013567ffffffffffffffff8111156140ea57600080fd5b6140f685828601614023565b9150509250929050565b801515811461104a57600080fd5b60008060006060848603121561412357600080fd5b83359250602084013561413581613d50565b9150604084013561414581614100565b809150509250925092565b6000806040838503121561416357600080fd5b82359150602083013561400281613d50565b6000806040838503121561418857600080fd5b50508035926020909101359150565b600080604083850312156141aa57600080fd5b82356141b581613d50565b9150602083013561400281614100565b60008082840360808112156141d957600080fd5b60608112156141e757600080fd5b50919360608501359350915050565b84151581526001600160a01b03841660208201528260408201526080606082015260006137256080830184613cf8565b6000806020838503121561423957600080fd5b823567ffffffffffffffff8082111561425157600080fd5b818501915085601f83011261426557600080fd5b81358181111561427457600080fd5b8660208260051b850101111561428957600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156142f057603f198886030184526142de858351613cf8565b945092850192908501906001016142c2565b5092979650505050505050565b6000806000806080858703121561431357600080fd5b843561431e81613d50565b9350602085013561432e81613d50565b925060408501359150606085013567ffffffffffffffff81111561435157600080fd5b61435d87828801614023565b91505092959194509250565b6000806000806060858703121561437f57600080fd5b843561438a81613d50565b935060208501359250604085013567ffffffffffffffff8111156143ad57600080fd5b6143b987828801613d91565b95989497509550505050565b600080604083850312156143d857600080fd5b82356143e381613d50565b9150602083013561400281613d50565b600181811c9082168061440757607f821691505b6020821081141561442857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561445657600080fd5b813561158681614100565b813581556020820135600182015560028101604083013561448181614100565b815490151560ff1660ff19919091161790555050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126144c457600080fd5b83018035915067ffffffffffffffff8211156144df57600080fd5b602001915036819003821315613dd357600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561451e5761451e6144f4565b5060010190565b60008351614537818460208801613ccc565b83519083019061454b818360208801613ccc565b01949350505050565b600082821015614566576145666144f4565b500390565b6000821982111561457e5761457e6144f4565b500190565b60006020828403121561459557600080fd5b815161158681614100565b6000602082840312156145b257600080fd5b815161158681613d50565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006122d76020830184866145bd565b60006020828403121561460c57600080fd5b5051919050565b8481528360208201526060604082015260006137256060830184866145bd565b634e487b7160e01b600052601260045260246000fd5b60008261465857614658614633565b500490565b60008261466c5761466c614633565b500690565b60008251614683818460208701613ccc565b9190910192915050565b60408101600584106146af57634e487b7160e01b600052602160045260246000fd5b92815290151560209091015290565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526137256080830184613cf8565b60006020828403121561471857600080fd5b815161158681613c99565b6000808585111561473357600080fd5b8386111561474057600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561477a5780818660140360031b1b83161692505b50509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c1b01a29f241f86ea5d619f6446a24ba135448333dd6093d322167c30fa8293864736f6c63430008090033",
}

// ScannerRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ScannerRegistryMetaData.ABI instead.
var ScannerRegistryABI = ScannerRegistryMetaData.ABI

// ScannerRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScannerRegistryMetaData.Bin instead.
var ScannerRegistryBin = ScannerRegistryMetaData.Bin

// DeployScannerRegistry deploys a new Ethereum contract, binding an instance of ScannerRegistry to it.
func DeployScannerRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *ScannerRegistry, error) {
	parsed, err := ScannerRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScannerRegistryBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ScannerRegistry{ScannerRegistryCaller: ScannerRegistryCaller{contract: contract}, ScannerRegistryTransactor: ScannerRegistryTransactor{contract: contract}, ScannerRegistryFilterer: ScannerRegistryFilterer{contract: contract}}, nil
}

// ScannerRegistry is an auto generated Go binding around an Ethereum contract.
type ScannerRegistry struct {
	ScannerRegistryCaller     // Read-only binding to the contract
	ScannerRegistryTransactor // Write-only binding to the contract
	ScannerRegistryFilterer   // Log filterer for contract events
}

// ScannerRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScannerRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScannerRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScannerRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScannerRegistrySession struct {
	Contract     *ScannerRegistry  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScannerRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScannerRegistryCallerSession struct {
	Contract *ScannerRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ScannerRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScannerRegistryTransactorSession struct {
	Contract     *ScannerRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ScannerRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScannerRegistryRaw struct {
	Contract *ScannerRegistry // Generic contract binding to access the raw methods on
}

// ScannerRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScannerRegistryCallerRaw struct {
	Contract *ScannerRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ScannerRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScannerRegistryTransactorRaw struct {
	Contract *ScannerRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScannerRegistry creates a new instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistry(address common.Address, backend bind.ContractBackend) (*ScannerRegistry, error) {
	contract, err := bindScannerRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistry{ScannerRegistryCaller: ScannerRegistryCaller{contract: contract}, ScannerRegistryTransactor: ScannerRegistryTransactor{contract: contract}, ScannerRegistryFilterer: ScannerRegistryFilterer{contract: contract}}, nil
}

// NewScannerRegistryCaller creates a new read-only instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryCaller(address common.Address, caller bind.ContractCaller) (*ScannerRegistryCaller, error) {
	contract, err := bindScannerRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryCaller{contract: contract}, nil
}

// NewScannerRegistryTransactor creates a new write-only instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ScannerRegistryTransactor, error) {
	contract, err := bindScannerRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryTransactor{contract: contract}, nil
}

// NewScannerRegistryFilterer creates a new log filterer instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ScannerRegistryFilterer, error) {
	contract, err := bindScannerRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryFilterer{contract: contract}, nil
}

// bindScannerRegistry binds a generic wrapper to an already deployed contract.
func bindScannerRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ScannerRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScannerRegistry *ScannerRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScannerRegistry.Contract.ScannerRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScannerRegistry *ScannerRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ScannerRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScannerRegistry *ScannerRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ScannerRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScannerRegistry *ScannerRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScannerRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScannerRegistry *ScannerRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScannerRegistry *ScannerRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.BalanceOf(&_ScannerRegistry.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.BalanceOf(&_ScannerRegistry.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetApproved(&_ScannerRegistry.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetApproved(&_ScannerRegistry.CallOpts, tokenId)
}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetManagerAt(opts *bind.CallOpts, scannerId *big.Int, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getManagerAt", scannerId, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetManagerAt(scannerId *big.Int, index *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetManagerAt(&_ScannerRegistry.CallOpts, scannerId, index)
}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetManagerAt(scannerId *big.Int, index *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetManagerAt(&_ScannerRegistry.CallOpts, scannerId, index)
}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetManagerCount(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getManagerCount", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetManagerCount(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetManagerCount(&_ScannerRegistry.CallOpts, scannerId)
}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetManagerCount(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetManagerCount(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryCaller) GetScanner(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScanner", scannerId)

	outstruct := new(struct {
		Registered bool
		Owner      common.Address
		ChainId    *big.Int
		Metadata   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistrySession) GetScanner(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	return _ScannerRegistry.Contract.GetScanner(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScanner(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	return _ScannerRegistry.Contract.GetScanner(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetScannerChainId(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScannerChainId", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetScannerChainId(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetScannerChainId(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScannerChainId(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetScannerChainId(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled)
func (_ScannerRegistry *ScannerRegistryCaller) GetScannerState(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
	Enabled    bool
}, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScannerState", scannerId)

	outstruct := new(struct {
		Registered bool
		Owner      common.Address
		ChainId    *big.Int
		Metadata   string
		Enabled    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Enabled = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled)
func (_ScannerRegistry *ScannerRegistrySession) GetScannerState(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
	Enabled    bool
}, error) {
	return _ScannerRegistry.Contract.GetScannerState(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScannerState(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
	Enabled    bool
}, error) {
	return _ScannerRegistry.Contract.GetScannerState(&_ScannerRegistry.CallOpts, scannerId)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetStakeController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getStakeController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetStakeController() (common.Address, error) {
	return _ScannerRegistry.Contract.GetStakeController(&_ScannerRegistry.CallOpts)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetStakeController() (common.Address, error) {
	return _ScannerRegistry.Contract.GetStakeController(&_ScannerRegistry.CallOpts)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistryCaller) GetStakeThreshold(opts *bind.CallOpts, subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getStakeThreshold", subject)

	if err != nil {
		return *new(IStakeSubjectStakeThreshold), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeSubjectStakeThreshold)).(*IStakeSubjectStakeThreshold)

	return out0, err

}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistrySession) GetStakeThreshold(subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _ScannerRegistry.Contract.GetStakeThreshold(&_ScannerRegistry.CallOpts, subject)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistryCallerSession) GetStakeThreshold(subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _ScannerRegistry.Contract.GetStakeThreshold(&_ScannerRegistry.CallOpts, subject)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsApprovedForAll(&_ScannerRegistry.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsApprovedForAll(&_ScannerRegistry.CallOpts, owner, operator)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsEnabled(opts *bind.CallOpts, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isEnabled", scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsEnabled(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsEnabled(&_ScannerRegistry.CallOpts, scannerId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsEnabled(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsEnabled(&_ScannerRegistry.CallOpts, scannerId)
}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsManager(opts *bind.CallOpts, scannerId *big.Int, manager common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isManager", scannerId, manager)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsManager(scannerId *big.Int, manager common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsManager(&_ScannerRegistry.CallOpts, scannerId, manager)
}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsManager(scannerId *big.Int, manager common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsManager(&_ScannerRegistry.CallOpts, scannerId, manager)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsRegistered(opts *bind.CallOpts, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isRegistered", scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsRegistered(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsRegistered(&_ScannerRegistry.CallOpts, scannerId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsRegistered(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsRegistered(&_ScannerRegistry.CallOpts, scannerId)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsStakedOverMin(opts *bind.CallOpts, subject *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isStakedOverMin", subject)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsStakedOverMin(&_ScannerRegistry.CallOpts, subject)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsStakedOverMin(&_ScannerRegistry.CallOpts, subject)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsTrustedForwarder(&_ScannerRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsTrustedForwarder(&_ScannerRegistry.CallOpts, forwarder)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Name() (string, error) {
	return _ScannerRegistry.Contract.Name(&_ScannerRegistry.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Name() (string, error) {
	return _ScannerRegistry.Contract.Name(&_ScannerRegistry.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.OwnerOf(&_ScannerRegistry.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.OwnerOf(&_ScannerRegistry.CallOpts, tokenId)
}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) ScannerAddressToId(opts *bind.CallOpts, scanner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "scannerAddressToId", scanner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) ScannerAddressToId(scanner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.ScannerAddressToId(&_ScannerRegistry.CallOpts, scanner)
}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) ScannerAddressToId(scanner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.ScannerAddressToId(&_ScannerRegistry.CallOpts, scanner)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ScannerRegistry.Contract.SupportsInterface(&_ScannerRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ScannerRegistry.Contract.SupportsInterface(&_ScannerRegistry.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Symbol() (string, error) {
	return _ScannerRegistry.Contract.Symbol(&_ScannerRegistry.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Symbol() (string, error) {
	return _ScannerRegistry.Contract.Symbol(&_ScannerRegistry.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) TokenURI(tokenId *big.Int) (string, error) {
	return _ScannerRegistry.Contract.TokenURI(&_ScannerRegistry.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ScannerRegistry.Contract.TokenURI(&_ScannerRegistry.CallOpts, tokenId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Version() (string, error) {
	return _ScannerRegistry.Contract.Version(&_ScannerRegistry.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Version() (string, error) {
	return _ScannerRegistry.Contract.Version(&_ScannerRegistry.CallOpts)
}

// AdminRegister is a paid mutator transaction binding the contract method 0x2a91fb34.
//
// Solidity: function adminRegister(address scanner, address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) AdminRegister(opts *bind.TransactOpts, scanner common.Address, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "adminRegister", scanner, owner, chainId, metadata)
}

// AdminRegister is a paid mutator transaction binding the contract method 0x2a91fb34.
//
// Solidity: function adminRegister(address scanner, address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistrySession) AdminRegister(scanner common.Address, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminRegister(&_ScannerRegistry.TransactOpts, scanner, owner, chainId, metadata)
}

// AdminRegister is a paid mutator transaction binding the contract method 0x2a91fb34.
//
// Solidity: function adminRegister(address scanner, address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) AdminRegister(scanner common.Address, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminRegister(&_ScannerRegistry.TransactOpts, scanner, owner, chainId, metadata)
}

// AdminUpdate is a paid mutator transaction binding the contract method 0xc2dae01d.
//
// Solidity: function adminUpdate(address scanner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) AdminUpdate(opts *bind.TransactOpts, scanner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "adminUpdate", scanner, chainId, metadata)
}

// AdminUpdate is a paid mutator transaction binding the contract method 0xc2dae01d.
//
// Solidity: function adminUpdate(address scanner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistrySession) AdminUpdate(scanner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminUpdate(&_ScannerRegistry.TransactOpts, scanner, chainId, metadata)
}

// AdminUpdate is a paid mutator transaction binding the contract method 0xc2dae01d.
//
// Solidity: function adminUpdate(address scanner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) AdminUpdate(scanner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminUpdate(&_ScannerRegistry.TransactOpts, scanner, chainId, metadata)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Approve(&_ScannerRegistry.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Approve(&_ScannerRegistry.TransactOpts, to, tokenId)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) DisableScanner(opts *bind.TransactOpts, scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "disableScanner", scannerId, permission)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistrySession) DisableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) DisableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) EnableScanner(opts *bind.TransactOpts, scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "enableScanner", scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistrySession) EnableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.EnableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) EnableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.EnableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "initialize", __manager, __router, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistrySession) Initialize(__manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Initialize(&_ScannerRegistry.TransactOpts, __manager, __router, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Initialize(__manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Initialize(&_ScannerRegistry.TransactOpts, __manager, __router, __name, __symbol)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistrySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Multicall(&_ScannerRegistry.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Multicall(&_ScannerRegistry.TransactOpts, data)
}

// Register is a paid mutator transaction binding the contract method 0xf11b1b88.
//
// Solidity: function register(address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Register(opts *bind.TransactOpts, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "register", owner, chainId, metadata)
}

// Register is a paid mutator transaction binding the contract method 0xf11b1b88.
//
// Solidity: function register(address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistrySession) Register(owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Register(&_ScannerRegistry.TransactOpts, owner, chainId, metadata)
}

// Register is a paid mutator transaction binding the contract method 0xf11b1b88.
//
// Solidity: function register(address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Register(owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Register(&_ScannerRegistry.TransactOpts, owner, chainId, metadata)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ScannerRegistry *ScannerRegistrySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom0(&_ScannerRegistry.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom0(&_ScannerRegistry.TransactOpts, from, to, tokenId, _data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetAccessManager(&_ScannerRegistry.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetAccessManager(&_ScannerRegistry.TransactOpts, newManager)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetApprovalForAll(&_ScannerRegistry.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetApprovalForAll(&_ScannerRegistry.TransactOpts, operator, approved)
}

// SetManager is a paid mutator transaction binding the contract method 0x5a74fc29.
//
// Solidity: function setManager(uint256 scannerId, address manager, bool enable) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetManager(opts *bind.TransactOpts, scannerId *big.Int, manager common.Address, enable bool) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setManager", scannerId, manager, enable)
}

// SetManager is a paid mutator transaction binding the contract method 0x5a74fc29.
//
// Solidity: function setManager(uint256 scannerId, address manager, bool enable) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetManager(scannerId *big.Int, manager common.Address, enable bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetManager(&_ScannerRegistry.TransactOpts, scannerId, manager, enable)
}

// SetManager is a paid mutator transaction binding the contract method 0x5a74fc29.
//
// Solidity: function setManager(uint256 scannerId, address manager, bool enable) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetManager(scannerId *big.Int, manager common.Address, enable bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetManager(&_ScannerRegistry.TransactOpts, scannerId, manager, enable)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetName(&_ScannerRegistry.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetName(&_ScannerRegistry.TransactOpts, ensRegistry, ensName)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setRouter", newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetRouter(&_ScannerRegistry.TransactOpts, newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetRouter(&_ScannerRegistry.TransactOpts, newRouter)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetStakeController(opts *bind.TransactOpts, stakeController common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setStakeController", stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeController(&_ScannerRegistry.TransactOpts, stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeController(&_ScannerRegistry.TransactOpts, stakeController)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetStakeThreshold(opts *bind.TransactOpts, newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setStakeThreshold", newStakeThreshold, chainId)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeThreshold(&_ScannerRegistry.TransactOpts, newStakeThreshold, chainId)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeThreshold(&_ScannerRegistry.TransactOpts, newStakeThreshold, chainId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.TransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.TransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeTo(&_ScannerRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeTo(&_ScannerRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeToAndCall(&_ScannerRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeToAndCall(&_ScannerRegistry.TransactOpts, newImplementation, data)
}

// ScannerRegistryAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryAccessManagerUpdatedIterator struct {
	Event *ScannerRegistryAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryAccessManagerUpdated represents a AccessManagerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*ScannerRegistryAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryAccessManagerUpdatedIterator{contract: _ScannerRegistry.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryAccessManagerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseAccessManagerUpdated(log types.Log) (*ScannerRegistryAccessManagerUpdated, error) {
	event := new(ScannerRegistryAccessManagerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ScannerRegistry contract.
type ScannerRegistryAdminChangedIterator struct {
	Event *ScannerRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryAdminChanged represents a AdminChanged event raised by the ScannerRegistry contract.
type ScannerRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ScannerRegistryAdminChangedIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryAdminChangedIterator{contract: _ScannerRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ScannerRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryAdminChanged)
				if err := _ScannerRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseAdminChanged(log types.Log) (*ScannerRegistryAdminChanged, error) {
	event := new(ScannerRegistryAdminChanged)
	if err := _ScannerRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ScannerRegistry contract.
type ScannerRegistryApprovalIterator struct {
	Event *ScannerRegistryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryApproval represents a Approval event raised by the ScannerRegistry contract.
type ScannerRegistryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ScannerRegistryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryApprovalIterator{contract: _ScannerRegistry.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScannerRegistryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryApproval)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseApproval(log types.Log) (*ScannerRegistryApproval, error) {
	event := new(ScannerRegistryApproval)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ScannerRegistry contract.
type ScannerRegistryApprovalForAllIterator struct {
	Event *ScannerRegistryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryApprovalForAll represents a ApprovalForAll event raised by the ScannerRegistry contract.
type ScannerRegistryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ScannerRegistryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryApprovalForAllIterator{contract: _ScannerRegistry.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ScannerRegistryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryApprovalForAll)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseApprovalForAll(log types.Log) (*ScannerRegistryApprovalForAll, error) {
	event := new(ScannerRegistryApprovalForAll)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ScannerRegistry contract.
type ScannerRegistryBeaconUpgradedIterator struct {
	Event *ScannerRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the ScannerRegistry contract.
type ScannerRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ScannerRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryBeaconUpgradedIterator{contract: _ScannerRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ScannerRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryBeaconUpgraded)
				if err := _ScannerRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*ScannerRegistryBeaconUpgraded, error) {
	event := new(ScannerRegistryBeaconUpgraded)
	if err := _ScannerRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryManagerEnabledIterator is returned from FilterManagerEnabled and is used to iterate over the raw logs and unpacked data for ManagerEnabled events raised by the ScannerRegistry contract.
type ScannerRegistryManagerEnabledIterator struct {
	Event *ScannerRegistryManagerEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryManagerEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryManagerEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryManagerEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryManagerEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryManagerEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryManagerEnabled represents a ManagerEnabled event raised by the ScannerRegistry contract.
type ScannerRegistryManagerEnabled struct {
	ScannerId *big.Int
	Manager   common.Address
	Enabled   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerEnabled is a free log retrieval operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterManagerEnabled(opts *bind.FilterOpts, scannerId []*big.Int, manager []common.Address) (*ScannerRegistryManagerEnabledIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ManagerEnabled", scannerIdRule, managerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryManagerEnabledIterator{contract: _ScannerRegistry.contract, event: "ManagerEnabled", logs: logs, sub: sub}, nil
}

// WatchManagerEnabled is a free log subscription operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchManagerEnabled(opts *bind.WatchOpts, sink chan<- *ScannerRegistryManagerEnabled, scannerId []*big.Int, manager []common.Address) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ManagerEnabled", scannerIdRule, managerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryManagerEnabled)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ManagerEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerEnabled is a log parse operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseManagerEnabled(log types.Log) (*ScannerRegistryManagerEnabled, error) {
	event := new(ScannerRegistryManagerEnabled)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ManagerEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryRouterUpdatedIterator struct {
	Event *ScannerRegistryRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryRouterUpdated represents a RouterUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*ScannerRegistryRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryRouterUpdatedIterator{contract: _ScannerRegistry.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryRouterUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseRouterUpdated(log types.Log) (*ScannerRegistryRouterUpdated, error) {
	event := new(ScannerRegistryRouterUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryScannerEnabledIterator is returned from FilterScannerEnabled and is used to iterate over the raw logs and unpacked data for ScannerEnabled events raised by the ScannerRegistry contract.
type ScannerRegistryScannerEnabledIterator struct {
	Event *ScannerRegistryScannerEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryScannerEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryScannerEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryScannerEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryScannerEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryScannerEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryScannerEnabled represents a ScannerEnabled event raised by the ScannerRegistry contract.
type ScannerRegistryScannerEnabled struct {
	ScannerId  *big.Int
	Enabled    bool
	Permission uint8
	Value      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScannerEnabled is a free log retrieval operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterScannerEnabled(opts *bind.FilterOpts, scannerId []*big.Int, enabled []bool) (*ScannerRegistryScannerEnabledIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ScannerEnabled", scannerIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryScannerEnabledIterator{contract: _ScannerRegistry.contract, event: "ScannerEnabled", logs: logs, sub: sub}, nil
}

// WatchScannerEnabled is a free log subscription operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchScannerEnabled(opts *bind.WatchOpts, sink chan<- *ScannerRegistryScannerEnabled, scannerId []*big.Int, enabled []bool) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ScannerEnabled", scannerIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryScannerEnabled)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScannerEnabled is a log parse operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseScannerEnabled(log types.Log) (*ScannerRegistryScannerEnabled, error) {
	event := new(ScannerRegistryScannerEnabled)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryScannerUpdatedIterator is returned from FilterScannerUpdated and is used to iterate over the raw logs and unpacked data for ScannerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryScannerUpdatedIterator struct {
	Event *ScannerRegistryScannerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryScannerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryScannerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryScannerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryScannerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryScannerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryScannerUpdated represents a ScannerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryScannerUpdated struct {
	ScannerId *big.Int
	ChainId   *big.Int
	Metadata  string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterScannerUpdated is a free log retrieval operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterScannerUpdated(opts *bind.FilterOpts, scannerId []*big.Int, chainId []*big.Int) (*ScannerRegistryScannerUpdatedIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ScannerUpdated", scannerIdRule, chainIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryScannerUpdatedIterator{contract: _ScannerRegistry.contract, event: "ScannerUpdated", logs: logs, sub: sub}, nil
}

// WatchScannerUpdated is a free log subscription operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchScannerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryScannerUpdated, scannerId []*big.Int, chainId []*big.Int) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ScannerUpdated", scannerIdRule, chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryScannerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScannerUpdated is a log parse operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseScannerUpdated(log types.Log) (*ScannerRegistryScannerUpdated, error) {
	event := new(ScannerRegistryScannerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryStakeControllerUpdatedIterator is returned from FilterStakeControllerUpdated and is used to iterate over the raw logs and unpacked data for StakeControllerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryStakeControllerUpdatedIterator struct {
	Event *ScannerRegistryStakeControllerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryStakeControllerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryStakeControllerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryStakeControllerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryStakeControllerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryStakeControllerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryStakeControllerUpdated represents a StakeControllerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryStakeControllerUpdated struct {
	NewstakeController common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterStakeControllerUpdated is a free log retrieval operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterStakeControllerUpdated(opts *bind.FilterOpts, newstakeController []common.Address) (*ScannerRegistryStakeControllerUpdatedIterator, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryStakeControllerUpdatedIterator{contract: _ScannerRegistry.contract, event: "StakeControllerUpdated", logs: logs, sub: sub}, nil
}

// WatchStakeControllerUpdated is a free log subscription operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchStakeControllerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryStakeControllerUpdated, newstakeController []common.Address) (event.Subscription, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryStakeControllerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeControllerUpdated is a log parse operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseStakeControllerUpdated(log types.Log) (*ScannerRegistryStakeControllerUpdated, error) {
	event := new(ScannerRegistryStakeControllerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryStakeThresholdChangedIterator is returned from FilterStakeThresholdChanged and is used to iterate over the raw logs and unpacked data for StakeThresholdChanged events raised by the ScannerRegistry contract.
type ScannerRegistryStakeThresholdChangedIterator struct {
	Event *ScannerRegistryStakeThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryStakeThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryStakeThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryStakeThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryStakeThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryStakeThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryStakeThresholdChanged represents a StakeThresholdChanged event raised by the ScannerRegistry contract.
type ScannerRegistryStakeThresholdChanged struct {
	ChainId   *big.Int
	Min       *big.Int
	Max       *big.Int
	Activated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeThresholdChanged is a free log retrieval operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterStakeThresholdChanged(opts *bind.FilterOpts, chainId []*big.Int) (*ScannerRegistryStakeThresholdChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "StakeThresholdChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryStakeThresholdChangedIterator{contract: _ScannerRegistry.contract, event: "StakeThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchStakeThresholdChanged is a free log subscription operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchStakeThresholdChanged(opts *bind.WatchOpts, sink chan<- *ScannerRegistryStakeThresholdChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "StakeThresholdChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryStakeThresholdChanged)
				if err := _ScannerRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeThresholdChanged is a log parse operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseStakeThresholdChanged(log types.Log) (*ScannerRegistryStakeThresholdChanged, error) {
	event := new(ScannerRegistryStakeThresholdChanged)
	if err := _ScannerRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ScannerRegistry contract.
type ScannerRegistryTransferIterator struct {
	Event *ScannerRegistryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryTransfer represents a Transfer event raised by the ScannerRegistry contract.
type ScannerRegistryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ScannerRegistryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryTransferIterator{contract: _ScannerRegistry.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScannerRegistryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryTransfer)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseTransfer(log types.Log) (*ScannerRegistryTransfer, error) {
	event := new(ScannerRegistryTransfer)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ScannerRegistry contract.
type ScannerRegistryUpgradedIterator struct {
	Event *ScannerRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryUpgraded represents a Upgraded event raised by the ScannerRegistry contract.
type ScannerRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ScannerRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryUpgradedIterator{contract: _ScannerRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ScannerRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryUpgraded)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseUpgraded(log types.Log) (*ScannerRegistryUpgraded, error) {
	event := new(ScannerRegistryUpgraded)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
