// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_agent_registry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IStakeSubjectStakeThreshold is an auto generated low-level Go binding around an user-defined struct.
type IStakeSubjectStakeThreshold struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
}

// AgentRegistryMetaData contains all meta data concerning the AgentRegistry contract.
var AgentRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"AgentCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AgentEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"AgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"FrontRunningDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newstakeController\",\"type\":\"address\"}],\"name\":\"StakeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"StakeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"createAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"disableAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"enableAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontRunningDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentByChainAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getAgentCountByChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgentState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"getCommitTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeController\",\"outputs\":[{\"internalType\":\"contractIStakeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getStakeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"isCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"isStakedOverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"prepareAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setFrontRunningDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeController\",\"type\":\"address\"}],\"name\":\"setStakeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"newStakeThreshold\",\"type\":\"tuple\"}],\"name\":\"setStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"updateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b50604051620050ad380380620050ad833981016040819052620000389162000105565b6001600160a01b038116608052600054610100900460ff16806200005f575060005460ff16155b620000c75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000ea576000805461ffff19166101011790555b8015620000fd576000805461ff00191690555b505062000137565b6000602082840312156200011857600080fd5b81516001600160a01b03811681146200013057600080fd5b9392505050565b60805160a051614f3462000179600039600081816110db015281816111600152818161127201526112f70152600081816105aa015261410c0152614f346000f3fe6080604052600436106102dc5760003560e01c80637935d5b411610184578063aebb5150116100d6578063c783034c1161008a578063d0c6464b11610064578063d0c6464b146108ab578063e985e9c5146108cb578063e9965e441461091557600080fd5b8063c783034c1461084b578063c87b56dd1461086b578063c95808041461088b57600080fd5b8063b88d4fde116100bb578063b88d4fde146107f4578063c02674c514610814578063c0d786551461082b57600080fd5b8063aebb5150146107b5578063b7b57b27146107d457600080fd5b80639a9d67bd11610138578063aa9ac6c611610112578063aa9ac6c614610748578063ac388ff514610768578063ac9650d81461078857600080fd5b80639a9d67bd146106e8578063a22cb46514610708578063a8439d981461072857600080fd5b80638eea276f116101695780638eea276f1461069e57806391cab63e146106be57806395d89b41146106d357600080fd5b80637935d5b41461065e57806389432d401461067e57600080fd5b80632de5aaf71161023d57806354fd4d50116101f1578063624ade3c116101cb578063624ade3c146105da5780636352211e1461061e57806370a082311461063e57600080fd5b806354fd4d501461052457806355d372fb1461056d578063572b6c051461058d57600080fd5b80633659cfe6116102225780633659cfe6146104d157806342842e0e146104f15780634f1ef2861461051157600080fd5b80632de5aaf7146104805780633121db1c146104b157600080fd5b80631e4def831161029457806321095d651161027957806321095d651461042057806323b872dd1461044057806329a8791a1461046057600080fd5b80631e4def83146103ce5780632016a0d21461040057600080fd5b8063081812fc116102c5578063081812fc14610338578063095ea7b314610370578063143527df1461039257600080fd5b806301ffc9a7146102e157806306fdde0314610316575b600080fd5b3480156102ed57600080fd5b506103016102fc366004614254565b610935565b60405190151581526020015b60405180910390f35b34801561032257600080fd5b5061032b6109b9565b60405161030d91906142c9565b34801561034457600080fd5b506103586103533660046142dc565b610a4c565b6040516001600160a01b03909116815260200161030d565b34801561037c57600080fd5b5061039061038b36600461430a565b610ae8565b005b34801561039e57600080fd5b506103c06103ad3660046142dc565b600090815261012d602052604090205490565b60405190815260200161030d565b3480156103da57600080fd5b506103ee6103e93660046142dc565b610c2c565b60405161030d96959493929190614371565b34801561040c57600080fd5b5061039061041b366004614412565b610c6d565b34801561042c57600080fd5b5061039061043b3660046144a7565b610db3565b34801561044c57600080fd5b5061039061045b3660046144db565b610e38565b34801561046c57600080fd5b5061030161047b3660046142dc565b610ec6565b34801561048c57600080fd5b506104a061049b3660046142dc565b610ee6565b60405161030d95949392919061451c565b3480156104bd57600080fd5b506103906104cc36600461456a565b61103c565b3480156104dd57600080fd5b506103906104ec3660046145bf565b6110d0565b3480156104fd57600080fd5b5061039061050c3660046144db565b61124c565b61039061051f36600461467f565b611267565b34801561053057600080fd5b5061032b6040518060400160405280600581526020017f302e312e3200000000000000000000000000000000000000000000000000000081525081565b34801561057957600080fd5b506103906105883660046142dc565b6113d0565b34801561059957600080fd5b506103016105a83660046145bf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156105e657600080fd5b506105fa6105f53660046142dc565b611448565b6040805182518152602080840151908201529181015115159082015260600161030d565b34801561062a57600080fd5b506103586106393660046142dc565b61149c565b34801561064a57600080fd5b506103c06106593660046145bf565b611528565b34801561066a57600080fd5b50610390610679366004614714565b6115c3565b34801561068a57600080fd5b506103c06106993660046142dc565b611859565b3480156106aa57600080fd5b506103c06106b93660046142dc565b611867565b3480156106ca57600080fd5b506103c061187f565b3480156106df57600080fd5b5061032b611891565b3480156106f457600080fd5b506103906107033660046145bf565b6118a1565b34801561071457600080fd5b5061039061072336600461479c565b6118c5565b34801561073457600080fd5b506103906107433660046142dc565b6118d7565b34801561075457600080fd5b506103906107633660046147ca565b6118e0565b34801561077457600080fd5b506103c0610783366004614844565b611b29565b34801561079457600080fd5b506107a86107a3366004614866565b611b49565b60405161030d91906148a8565b3480156107c157600080fd5b50610192546001600160a01b0316610358565b3480156107e057600080fd5b506103016107ef3660046142dc565b611c3e565b34801561080057600080fd5b5061039061080f36600461490a565b611c49565b34801561082057600080fd5b506103c061019a5481565b34801561083757600080fd5b506103906108463660046145bf565b611cd8565b34801561085757600080fd5b506103016108663660046142dc565b611d95565b34801561087757600080fd5b5061032b6108863660046142dc565b611dd4565b34801561089757600080fd5b506103906108a63660046145bf565b611eca565b3480156108b757600080fd5b506103906108c63660046144a7565b611f88565b3480156108d757600080fd5b506103016108e6366004614976565b6001600160a01b0391821660009081526101656020908152604080832093909416825291909152205460ff1690565b34801561092157600080fd5b506103906109303660046149a4565b611fec565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061099857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109b357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606061016080546109c990614a06565b80601f01602080910402602001604051908101604052809291908181526020018280546109f590614a06565b8015610a425780601f10610a1757610100808354040283529160200191610a42565b820191906000526020600020905b815481529060010190602001808311610a2557829003601f168201915b5050505050905090565b600081815261016260205260408120546001600160a01b0316610acb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815261016460205260409020546001600160a01b031690565b6000610af38261149c565b9050806001600160a01b0316836001600160a01b03161415610b7d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610ac2565b806001600160a01b0316610b8f6120c8565b6001600160a01b03161480610bab5750610bab816108e66120c8565b610c1d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac2565b610c2783836120d2565b505050565b60008060006060806000610c3f87610ee6565b9399509197509550935091508585858585610c598c611d95565b949c939b5091995097509550909350915050565b600054610100900460ff1680610c86575060005460ff16155b610ce95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff16158015610d0b576000805461ffff19166101011790555b610d1487612141565b610d1d86612293565b610d256123e4565b610d9885858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284376000920191909152506124a692505050565b8015610daa576000805461ff00191690555b50505050505050565b610dbd8282612574565b610e2857610dc96120c8565b816002811115610ddb57610ddb614a41565b6040517fe5f41d760000000000000000000000000000000000000000000000000000000081526001600160a01b03909216600483015260ff16602482015260448101839052606401610ac2565b610e3482826000612610565b5050565b610e49610e436120c8565b82612626565b610ebb5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac2565b610c2783838361271f565b600081815261016260205260408120546001600160a01b031615156109b3565b60008060006060806000610f1287600090815261016260205260409020546001600160a01b0316151590565b90508081610f21576000610f2a565b610f2a8861149c565b60008981526101f6602052604090208054600182018054919290916002909101908290610f5690614a06565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8290614a06565b8015610fcf5780601f10610fa457610100808354040283529160200191610fcf565b820191906000526020600020905b815481529060010190602001808311610fb257829003601f168201915b505050505091508080548060200260200160405190810160405280929190818152602001828054801561102157602002820191906000526020600020905b81548152602001906001019080831161100d575b50505050509050955095509550955095505091939590929450565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a61106e816110696120c8565b6128ef565b6110bf578061107b6120c8565b6040517f75000dc000000000000000000000000000000000000000000000000000000000815260048101929092526001600160a01b03166024820152604401610ac2565b6110ca84848461298d565b50505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561115e5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ac2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111b97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146112245760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ac2565b61122d81612abc565b6040805160008082526020820190925261124991839190612af6565b50565b610c2783838360405180602001604052806000815250611c49565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112f55760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608401610ac2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113bb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608401610ac2565b6113c482612abc565b610e3482826001612af6565b7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc6113fd816110696120c8565b61140a578061107b6120c8565b61019a8290556040518281527ff6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77906020015b60405180910390a15050565b61146e604051806060016040528060008152602001600081526020016000151581525090565b5050604080516060810182526101975481526101985460208201526101995460ff1615159181019190915290565b600081815261016260205260408120546001600160a01b0316806109b35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ac2565b60006001600160a01b0382166115a65760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ac2565b506001600160a01b03166000908152610163602052604090205490565b81818080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050825115159150611634905057604051630446493360e01b8152602060048201526008602482015267636861696e49647360c01b6044820152606401610ac2565b60015b81518110156116c9578161164c600183614a6d565b8151811061165c5761165c614a84565b602002602001015182828151811061167657611676614a84565b6020026020010151116116b75760405163237c384f60e01b8152602060048201526008602482015267636861696e49647360c01b6044820152606401610ac2565b806116c181614a9a565b915050611637565b508686868686866040516020016116e596959493929190614ab5565b60408051601f19818403018152918152815160209283012061019a54600082815261012d90945291909220548115806117315750801580159061173157504261172e8383614b30565b11155b611767576040517f1a74087f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815261012d6020526040812055611781898b612ca5565b6117c58a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150612dea9050565b6118098a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150612df69050565b61184d8a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150612e029050565b50505050505050505050565b60006109b361022883612e64565b600081815261022a602052604081206109b390612e70565b600061188c610228612e70565b905090565b606061016180546109c990614a06565b60006118af816110696120c8565b6118bc578061107b6120c8565b610e3482612e7a565b610e346118d06120c8565b8383612f1c565b61124981612fed565b846118ea8161149c565b6001600160a01b03166118fb6120c8565b6001600160a01b031614611956576119116120c8565b6040517f871d7af30000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015260248101829052604401610ac2565b828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251151591506119c7905057604051630446493360e01b8152602060048201526008602482015267636861696e49647360c01b6044820152606401610ac2565b60015b8151811015611a5c57816119df600183614a6d565b815181106119ef576119ef614a84565b6020026020010151828281518110611a0957611a09614a84565b602002602001015111611a4a5760405163237c384f60e01b8152602060048201526008602482015267636861696e49647360c01b6044820152606401610ac2565b80611a5481614a9a565b9150506119ca565b50611aa18787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150612dea9050565b611ae58787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150612df69050565b610daa8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150612e029050565b600082815261022a60205260408120611b429083612e64565b9392505050565b60608167ffffffffffffffff811115611b6457611b646145dc565b604051908082528060200260200182016040528015611b9757816020015b6060815260200190600190039081611b825790505b50905060005b82811015611c3757611c0730858584818110611bbb57611bbb614a84565b9050602002810190611bcd9190614b48565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061304892505050565b828281518110611c1957611c19614a84565b60200260200101819052508080611c2f90614a9a565b915050611b9d565b5092915050565b60006109b38261306d565b611c5a611c546120c8565b83612626565b611ccc5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac2565b6110ca8484848461314d565b6000611ce6816110696120c8565b611cf3578061107b6120c8565b6001600160a01b038216611d4a5760405163eac0d38960e01b815260206004820152600960248201527f6e6577526f7574657200000000000000000000000000000000000000000000006044820152606401610ac2565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a25050565b6000611da082610ec6565b8015611dc4575060008281526101c460209081526040808320838052909152902054155b80156109b357506109b38261306d565b600081815261016260205260409020546060906001600160a01b0316611e625760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610ac2565b6000611e7960408051602081019091526000815290565b90506000815111611e995760405180602001604052806000815250611b42565b80611ea3846131d6565b604051602001611eb4929190614b8f565b6040516020818303038152906040529392505050565b6000611ed8816110696120c8565b611ee5578061107b6120c8565b611eff6001600160a01b038316637965db0b60e01b613308565b611f3d576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610ac2565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b611f918261306d565b611fca576040517f16b7494700000000000000000000000000000000000000000000000000000000815260048101839052602401610ac2565b611fd48282612574565b611fe057610dc96120c8565b610e3482826001612610565b7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc612019816110696120c8565b612026578061107b6120c8565b8151602083015111612064576040517fb298dff400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151610197819055602080840151610198819055604080860151610199805460ff191691151591821790558151948552928401919091528201527f6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b59060600161143c565b600061188c613324565b60008181526101646020526040902080546001600160a01b0319166001600160a01b03841690811790915581906121088261149c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff168061215a575060005460ff16155b6121bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff161580156121df576000805461ffff19166101011790555b6121f96001600160a01b038316637965db0b60e01b613308565b612237576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610ac2565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610e34576000805461ff00191690555050565b600054610100900460ff16806122ac575060005460ff16155b61230f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff16158015612331576000805461ffff19166101011790555b6001600160a01b0382166123885760405163eac0d38960e01b815260206004820152600660248201527f726f7574657200000000000000000000000000000000000000000000000000006044820152606401610ac2565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a28015610e34576000805461ff00191690555050565b600054610100900460ff16806123fd575060005460ff16155b6124605760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff16158015612482576000805461ffff19166101011790555b61248a61332e565b61249261332e565b8015611249576000805461ff001916905550565b600054610100900460ff16806124bf575060005460ff16155b6125225760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff16158015612544576000805461ffff19166101011790555b61254c61332e565b61255461332e565b61255e83836133df565b8015610c27576000805461ff0019169055505050565b60008082600281111561258957612589614a41565b14156125c2576125bb7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc6110696120c8565b90506109b3565b60018260028111156125d6576125d6614a41565b1415612607576125e58361149c565b6001600160a01b03166125f66120c8565b6001600160a01b03161490506109b3565b50600092915050565b61261b8383836134bd565b610c27838383613529565b600081815261016260205260408120546001600160a01b03166126a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac2565b60006126ab8361149c565b9050806001600160a01b0316846001600160a01b031614806126e65750836001600160a01b03166126db84610a4c565b6001600160a01b0316145b8061271757506001600160a01b038082166000908152610165602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166127328261149c565b6001600160a01b0316146127ae5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610ac2565b6001600160a01b0382166128295760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ac2565b6128346000826120d2565b6001600160a01b03831660009081526101636020526040812080546001929061285e908490614a6d565b90915550506001600160a01b03821660009081526101636020526040812080546001929061288d908490614b30565b90915550506000818152610162602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6033546040517f91d14854000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190614bbe565b6040517f02571be30000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b158015612a0557600080fd5b505afa158015612a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3d9190614bdb565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b8152600401612a6a929190614bf8565b602060405180830381600087803b158015612a8457600080fd5b505af1158015612a98573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca9190614c27565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3612ae9816110696120c8565b610e34578061107b6120c8565b6000612b297f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b9050612b34846135a5565b600083511180612b415750815b15612b5257612b50848461365a565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16612c9e57805460ff191660011781556040516001600160a01b0383166024820152612bea90869060440160408051601f198184030181529190526020810180516001600160e01b03167f3659cfe60000000000000000000000000000000000000000000000000000000017905261365a565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b03838116911614612c955760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f75727468657220757067726164657300000000000000000000000000000000006064820152608401610ac2565b612c9e85613745565b5050505050565b6001600160a01b038216612cfb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac2565b600081815261016260205260409020546001600160a01b031615612d615760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac2565b6001600160a01b038216600090815261016360205260408120805460019290612d8b908490614b30565b90915550506000818152610162602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6110ca84848484613785565b6110ca84848484613935565b6110ca84848484604051602401612e1c9493929190614c8f565b60408051601f198184030181529190526020810180516001600160e01b03167fad3dcf3300000000000000000000000000000000000000000000000000000000179052613aa0565b6000611b428383613b2c565b60006109b3825490565b6001600160a01b038116612ed15760405163eac0d38960e01b815260206004820152600f60248201527f7374616b65436f6e74726f6c6c657200000000000000000000000000000000006044820152606401610ac2565b61019280546001600160a01b0319166001600160a01b0383169081179091556040517fcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f0090600090a250565b816001600160a01b0316836001600160a01b03161415612f7e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac2565b6001600160a01b0383811660008181526101656020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b600081815261012d602052604090205415613034576040517f04acdf1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600090815261012d60205260409020429055565b6060611b428383604051806060016040528060278152602001614ed860279139613b56565b600080613083610192546001600160a01b031690565b6001600160a01b0316141561309a57506001919050565b61019754610192546001600160a01b03166040517fa290bf3800000000000000000000000000000000000000000000000000000000815260016004820152602481018590526001600160a01b03919091169063a290bf389060440160206040518083038186803b15801561310d57600080fd5b505afa158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190614c27565b101592915050565b61315884848461271f565b61316484848484613c2a565b6110ca5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac2565b60608161321657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613240578061322a81614a9a565b91506132399050600a83614cdc565b915061321a565b60008167ffffffffffffffff81111561325b5761325b6145dc565b6040519080825280601f01601f191660200182016040528015613285576020820181803683370190505b5090505b84156127175761329a600183614a6d565b91506132a7600a86614cf0565b6132b2906030614b30565b60f81b8183815181106132c7576132c7614a84565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613301600a86614cdc565b9450613289565b600061331383613dad565b8015611b425750611b428383613de0565b600061188c613ebf565b600054610100900460ff1680613347575060005460ff16155b6133aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff16158015612492576000805461ffff19166101011790558015611249576000805461ff001916905550565b600054610100900460ff16806133f8575060005460ff16155b61345b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ac2565b600054610100900460ff1615801561347d576000805461ffff19166101011790555b82516134919061016090602086019061416b565b5081516134a69061016190602085019061416b565b508015610c27576000805461ff0019169055505050565b6134ec8260028111156134d2576134d2614a41565b60008581526101c4602052604090209060ff168315613ec9565b6134f583611d95565b1515837fb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d6418484604051612fe0929190614d04565b610c278383600281111561353f5761353f614a41565b604051602481019290925260ff166044820152821515606482015260840160408051601f198184030181529190526020810180516001600160e01b03167f7dae17cf00000000000000000000000000000000000000000000000000000000179052613aa0565b803b6136195760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610ac2565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6136b95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ac2565b600080846001600160a01b0316846040516136d49190614d35565b600060405180830381855af49150503d806000811461370f576040519150601f19603f3d011682016040523d82523d6000602084013e613714565b606091505b509150915061373c8282604051806060016040528060278152602001614ed860279139613f18565b95945050505050565b61374e816135a5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60008061379186610ee6565b9450509350505081600014156137af576137ad61022887613f51565b505b6000805b82518210806137c157508481105b1561392b57825182141561381e576138188861022a60008989866137e481614a9a565b97508181106137f5576137f5614a84565b905060200201358152602001908152602001600020613f5190919063ffffffff16565b506137b3565b80851415613870576138188861022a6000868661383a81614a9a565b97508151811061384c5761384c614a84565b60200260200101518152602001908152602001600020613f5d90919063ffffffff16565b85858281811061388257613882614a84565b9050602002013583838151811061389b5761389b614a84565b602002602001015110156138bd576138188861022a6000868661383a81614a9a565b8585828181106138cf576138cf614a84565b905060200201358383815181106138e8576138e8614a84565b6020026020010151111561390b576138188861022a60008989866137e481614a9a565b8161391581614a9a565b925050808061392390614a9a565b9150506137b3565b5050505050505050565b61394184848484613f69565b60008481526101f6602052604080822090516139609160010190614d51565b6040805191829003909120855160208088019190912060008181526101f79092529290205490925060ff16156139c5576040517f9fb0c00800000000000000000000000000000000000000000000000000000000815260048101829052602401610ac2565b60008181526101f7602090815260408083208054600160ff199182168117909255868552828520805490911690558984526101f6909252822054613a0891614b30565b9050604051806060016040528082815260200187815260200186868080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250508981526101f66020908152604090912083518155838201518051919350613a8492600185019291019061416b565b506040820151805161184d9160028401916020909101906141ef565b6065546001600160a01b031615611249576065546040517f3fa222c40000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633fa222c490613afa9084906004016142c9565b600060405180830381600087803b158015613b1457600080fd5b505af1925050508015613b25575060015b6112495750565b6000826000018281548110613b4357613b43614a84565b9060005260206000200154905092915050565b6060833b613bb55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ac2565b600080856001600160a01b031685604051613bd09190614d35565b600060405180830381855af49150503d8060008114613c0b576040519150601f19603f3d011682016040523d82523d6000602084013e613c10565b606091505b5091509150613c20828286613f18565b9695505050505050565b60006001600160a01b0384163b15613da257836001600160a01b031663150b7a02613c536120c8565b8786866040518563ffffffff1660e01b8152600401613c759493929190614ded565b602060405180830381600087803b158015613c8f57600080fd5b505af1925050508015613cbf575060408051601f3d908101601f19168201909252613cbc91810190614e1f565b60015b613d6f573d808015613ced576040519150601f19603f3d011682016040523d82523d6000602084013e613cf2565b606091505b508051613d675760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac2565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050612717565b506001949350505050565b6000613dc0826301ffc9a760e01b613de0565b80156109b35750613dd9826001600160e01b0319613de0565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090613e47908690614d35565b6000604051808303818686fa925050503d8060008114613e83576040519150601f19603f3d011682016040523d82523d6000602084013e613e88565b606091505b5091509150602081511015613ea357600093505050506109b3565b818015613c20575080806020019051810190613c209190614bbe565b600061188c613fbc565b8015613ef357600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b60608315613f27575081611b42565b825115613f375782518084602001fd5b8160405162461bcd60e51b8152600401610ac291906142c9565b6000611b428383613fc6565b6000611b428383614015565b613f716120c8565b6001600160a01b0316847f334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6858585604051613fae93929190614e3c565b60405180910390a350505050565b600061188c614108565b600081815260018301602052604081205461400d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109b3565b5060006109b3565b600081815260018301602052604081205480156140fe576000614039600183614a6d565b855490915060009061404d90600190614a6d565b90508181146140b257600086600001828154811061406d5761406d614a84565b906000526020600020015490508087600001848154811061409057614090614a84565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140c3576140c3614e62565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109b3565b60009150506109b3565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561416657600036614149601482614a6d565b61415592369290614e78565b61415e91614ea2565b60601c905090565b503390565b82805461417790614a06565b90600052602060002090601f01602090048101928261419957600085556141df565b82601f106141b257805160ff19168380011785556141df565b828001600101855582156141df579182015b828111156141df5782518255916020019190600101906141c4565b506141eb929150614229565b5090565b8280548282559060005260206000209081019282156141df57916020028201828111156141df5782518255916020019190600101906141c4565b5b808211156141eb576000815560010161422a565b6001600160e01b03198116811461124957600080fd5b60006020828403121561426657600080fd5b8135611b428161423e565b60005b8381101561428c578181015183820152602001614274565b838111156110ca5750506000910152565b600081518084526142b5816020860160208601614271565b601f01601f19169290920160200192915050565b602081526000611b42602083018461429d565b6000602082840312156142ee57600080fd5b5035919050565b6001600160a01b038116811461124957600080fd5b6000806040838503121561431d57600080fd5b8235614328816142f5565b946020939093013593505050565b600081518084526020808501945080840160005b838110156143665781518752958201959082019060010161434a565b509495945050505050565b86151581526001600160a01b038616602082015284604082015260c0606082015260006143a160c083018661429d565b82810360808401526143b38186614336565b91505082151560a0830152979650505050505050565b60008083601f8401126143db57600080fd5b50813567ffffffffffffffff8111156143f357600080fd5b60208301915083602082850101111561440b57600080fd5b9250929050565b6000806000806000806080878903121561442b57600080fd5b8635614436816142f5565b95506020870135614446816142f5565b9450604087013567ffffffffffffffff8082111561446357600080fd5b61446f8a838b016143c9565b9096509450606089013591508082111561448857600080fd5b5061449589828a016143c9565b979a9699509497509295939492505050565b600080604083850312156144ba57600080fd5b823591506020830135600381106144d057600080fd5b809150509250929050565b6000806000606084860312156144f057600080fd5b83356144fb816142f5565b9250602084013561450b816142f5565b929592945050506040919091013590565b85151581526001600160a01b038516602082015283604082015260a06060820152600061454c60a083018561429d565b828103608084015261455e8185614336565b98975050505050505050565b60008060006040848603121561457f57600080fd5b833561458a816142f5565b9250602084013567ffffffffffffffff8111156145a657600080fd5b6145b2868287016143c9565b9497909650939450505050565b6000602082840312156145d157600080fd5b8135611b42816142f5565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261460357600080fd5b813567ffffffffffffffff8082111561461e5761461e6145dc565b604051601f8301601f19908116603f01168101908282118183101715614646576146466145dc565b8160405283815286602085880101111561465f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561469257600080fd5b823561469d816142f5565b9150602083013567ffffffffffffffff8111156146b957600080fd5b6146c5858286016145f2565b9150509250929050565b60008083601f8401126146e157600080fd5b50813567ffffffffffffffff8111156146f957600080fd5b6020830191508360208260051b850101111561440b57600080fd5b6000806000806000806080878903121561472d57600080fd5b86359550602087013561473f816142f5565b9450604087013567ffffffffffffffff8082111561475c57600080fd5b6147688a838b016143c9565b9096509450606089013591508082111561478157600080fd5b5061449589828a016146cf565b801515811461124957600080fd5b600080604083850312156147af57600080fd5b82356147ba816142f5565b915060208301356144d08161478e565b6000806000806000606086880312156147e257600080fd5b85359450602086013567ffffffffffffffff8082111561480157600080fd5b61480d89838a016143c9565b9096509450604088013591508082111561482657600080fd5b50614833888289016146cf565b969995985093965092949392505050565b6000806040838503121561485757600080fd5b50508035926020909101359150565b6000806020838503121561487957600080fd5b823567ffffffffffffffff81111561489057600080fd5b61489c858286016146cf565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156148fd57603f198886030184526148eb85835161429d565b945092850192908501906001016148cf565b5092979650505050505050565b6000806000806080858703121561492057600080fd5b843561492b816142f5565b9350602085013561493b816142f5565b925060408501359150606085013567ffffffffffffffff81111561495e57600080fd5b61496a878288016145f2565b91505092959194509250565b6000806040838503121561498957600080fd5b8235614994816142f5565b915060208301356144d0816142f5565b6000606082840312156149b657600080fd5b6040516060810181811067ffffffffffffffff821117156149d9576149d96145dc565b8060405250823581526020830135602082015260408301356149fa8161478e565b60408201529392505050565b600181811c90821680614a1a57607f821691505b60208210811415614a3b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614a7f57614a7f614a57565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614aae57614aae614a57565b5060010190565b8681526bffffffffffffffffffffffff198660601b16602082015283856034830137600084820160348101600081527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115614b1157600080fd5b8460051b80878337600092016034019182525098975050505050505050565b60008219821115614b4357614b43614a57565b500190565b6000808335601e19843603018112614b5f57600080fd5b83018035915067ffffffffffffffff821115614b7a57600080fd5b60200191503681900382131561440b57600080fd5b60008351614ba1818460208801614271565b835190830190614bb5818360208801614271565b01949350505050565b600060208284031215614bd057600080fd5b8151611b428161478e565b600060208284031215614bed57600080fd5b8151611b42816142f5565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215614c3957600080fd5b5051919050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614c7257600080fd5b8260051b8083602087013760009401602001938452509192915050565b848152606060208201526000614ca8606083018661429d565b8281036040840152614cbb818587614c40565b979650505050505050565b634e487b7160e01b600052601260045260246000fd5b600082614ceb57614ceb614cc6565b500490565b600082614cff57614cff614cc6565b500690565b6040810160038410614d2657634e487b7160e01b600052602160045260246000fd5b92815290151560209091015290565b60008251614d47818460208701614271565b9190910192915050565b600080835481600182811c915080831680614d6d57607f831692505b6020808410821415614d8d57634e487b7160e01b86526022600452602486fd5b818015614da15760018114614db257614ddf565b60ff19861689528489019650614ddf565b60008a81526020902060005b86811015614dd75781548b820152908501908301614dbe565b505084890196505b509498975050505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613c20608083018461429d565b600060208284031215614e3157600080fd5b8151611b428161423e565b604081526000614e4f604083018661429d565b8281036020840152613c20818587614c40565b634e487b7160e01b600052603160045260246000fd5b60008085851115614e8857600080fd5b83861115614e9557600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015614ecf5780818660140360031b1b83161692505b50509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208379f2559432d93fe7590acf6c3dcbf18a0f0c70fb38acf0f37f821596877aac64736f6c63430008090033",
}

// AgentRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use AgentRegistryMetaData.ABI instead.
var AgentRegistryABI = AgentRegistryMetaData.ABI

// AgentRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AgentRegistryMetaData.Bin instead.
var AgentRegistryBin = AgentRegistryMetaData.Bin

// DeployAgentRegistry deploys a new Ethereum contract, binding an instance of AgentRegistry to it.
func DeployAgentRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *AgentRegistry, error) {
	parsed, err := AgentRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AgentRegistryBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AgentRegistry{AgentRegistryCaller: AgentRegistryCaller{contract: contract}, AgentRegistryTransactor: AgentRegistryTransactor{contract: contract}, AgentRegistryFilterer: AgentRegistryFilterer{contract: contract}}, nil
}

// AgentRegistry is an auto generated Go binding around an Ethereum contract.
type AgentRegistry struct {
	AgentRegistryCaller     // Read-only binding to the contract
	AgentRegistryTransactor // Write-only binding to the contract
	AgentRegistryFilterer   // Log filterer for contract events
}

// AgentRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AgentRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AgentRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AgentRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AgentRegistrySession struct {
	Contract     *AgentRegistry    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AgentRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AgentRegistryCallerSession struct {
	Contract *AgentRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AgentRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AgentRegistryTransactorSession struct {
	Contract     *AgentRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AgentRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AgentRegistryRaw struct {
	Contract *AgentRegistry // Generic contract binding to access the raw methods on
}

// AgentRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AgentRegistryCallerRaw struct {
	Contract *AgentRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// AgentRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AgentRegistryTransactorRaw struct {
	Contract *AgentRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAgentRegistry creates a new instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistry(address common.Address, backend bind.ContractBackend) (*AgentRegistry, error) {
	contract, err := bindAgentRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AgentRegistry{AgentRegistryCaller: AgentRegistryCaller{contract: contract}, AgentRegistryTransactor: AgentRegistryTransactor{contract: contract}, AgentRegistryFilterer: AgentRegistryFilterer{contract: contract}}, nil
}

// NewAgentRegistryCaller creates a new read-only instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryCaller(address common.Address, caller bind.ContractCaller) (*AgentRegistryCaller, error) {
	contract, err := bindAgentRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryCaller{contract: contract}, nil
}

// NewAgentRegistryTransactor creates a new write-only instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*AgentRegistryTransactor, error) {
	contract, err := bindAgentRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryTransactor{contract: contract}, nil
}

// NewAgentRegistryFilterer creates a new log filterer instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*AgentRegistryFilterer, error) {
	contract, err := bindAgentRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryFilterer{contract: contract}, nil
}

// bindAgentRegistry binds a generic wrapper to an already deployed contract.
func bindAgentRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AgentRegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AgentRegistry *AgentRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AgentRegistry.Contract.AgentRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AgentRegistry *AgentRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.Contract.AgentRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AgentRegistry *AgentRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AgentRegistry.Contract.AgentRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AgentRegistry *AgentRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AgentRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AgentRegistry *AgentRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AgentRegistry *AgentRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AgentRegistry.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AgentRegistry.Contract.BalanceOf(&_AgentRegistry.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AgentRegistry.Contract.BalanceOf(&_AgentRegistry.CallOpts, owner)
}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) FrontRunningDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "frontRunningDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) FrontRunningDelay() (*big.Int, error) {
	return _AgentRegistry.Contract.FrontRunningDelay(&_AgentRegistry.CallOpts)
}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) FrontRunningDelay() (*big.Int, error) {
	return _AgentRegistry.Contract.FrontRunningDelay(&_AgentRegistry.CallOpts)
}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool created, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryCaller) GetAgent(opts *bind.CallOpts, agentId *big.Int) (struct {
	Created      bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgent", agentId)

	outstruct := new(struct {
		Created      bool
		Owner        common.Address
		AgentVersion *big.Int
		Metadata     string
		ChainIds     []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Created = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentVersion = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool created, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistrySession) GetAgent(agentId *big.Int) (struct {
	Created      bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgent(&_AgentRegistry.CallOpts, agentId)
}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool created, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgent(agentId *big.Int) (struct {
	Created      bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgent(&_AgentRegistry.CallOpts, agentId)
}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentByChainAndIndex(opts *bind.CallOpts, chainId *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentByChainAndIndex", chainId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentByChainAndIndex(chainId *big.Int, index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByChainAndIndex(&_AgentRegistry.CallOpts, chainId, index)
}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentByChainAndIndex(chainId *big.Int, index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByChainAndIndex(&_AgentRegistry.CallOpts, chainId, index)
}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentByIndex(index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByIndex(&_AgentRegistry.CallOpts, index)
}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentByIndex(index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByIndex(&_AgentRegistry.CallOpts, index)
}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentCount() (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCount(&_AgentRegistry.CallOpts)
}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentCount() (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCount(&_AgentRegistry.CallOpts)
}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentCountByChain(opts *bind.CallOpts, chainId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentCountByChain", chainId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentCountByChain(chainId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCountByChain(&_AgentRegistry.CallOpts, chainId)
}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentCountByChain(chainId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCountByChain(&_AgentRegistry.CallOpts, chainId)
}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool created, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled)
func (_AgentRegistry *AgentRegistryCaller) GetAgentState(opts *bind.CallOpts, agentId *big.Int) (struct {
	Created      bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
	Enabled      bool
}, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentState", agentId)

	outstruct := new(struct {
		Created      bool
		Owner        common.Address
		AgentVersion *big.Int
		Metadata     string
		ChainIds     []*big.Int
		Enabled      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Created = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentVersion = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)
	outstruct.Enabled = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool created, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled)
func (_AgentRegistry *AgentRegistrySession) GetAgentState(agentId *big.Int) (struct {
	Created      bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
	Enabled      bool
}, error) {
	return _AgentRegistry.Contract.GetAgentState(&_AgentRegistry.CallOpts, agentId)
}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool created, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentState(agentId *big.Int) (struct {
	Created      bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
	Enabled      bool
}, error) {
	return _AgentRegistry.Contract.GetAgentState(&_AgentRegistry.CallOpts, agentId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistrySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.GetApproved(&_AgentRegistry.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.GetApproved(&_AgentRegistry.CallOpts, tokenId)
}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetCommitTimestamp(opts *bind.CallOpts, commit [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getCommitTimestamp", commit)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetCommitTimestamp(commit [32]byte) (*big.Int, error) {
	return _AgentRegistry.Contract.GetCommitTimestamp(&_AgentRegistry.CallOpts, commit)
}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetCommitTimestamp(commit [32]byte) (*big.Int, error) {
	return _AgentRegistry.Contract.GetCommitTimestamp(&_AgentRegistry.CallOpts, commit)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_AgentRegistry *AgentRegistryCaller) GetStakeController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getStakeController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_AgentRegistry *AgentRegistrySession) GetStakeController() (common.Address, error) {
	return _AgentRegistry.Contract.GetStakeController(&_AgentRegistry.CallOpts)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) GetStakeController() (common.Address, error) {
	return _AgentRegistry.Contract.GetStakeController(&_AgentRegistry.CallOpts)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistryCaller) GetStakeThreshold(opts *bind.CallOpts, arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getStakeThreshold", arg0)

	if err != nil {
		return *new(IStakeSubjectStakeThreshold), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeSubjectStakeThreshold)).(*IStakeSubjectStakeThreshold)

	return out0, err

}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistrySession) GetStakeThreshold(arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _AgentRegistry.Contract.GetStakeThreshold(&_AgentRegistry.CallOpts, arg0)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistryCallerSession) GetStakeThreshold(arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _AgentRegistry.Contract.GetStakeThreshold(&_AgentRegistry.CallOpts, arg0)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsApprovedForAll(&_AgentRegistry.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsApprovedForAll(&_AgentRegistry.CallOpts, owner, operator)
}

// IsCreated is a free data retrieval call binding the contract method 0x29a8791a.
//
// Solidity: function isCreated(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsCreated(opts *bind.CallOpts, agentId *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isCreated", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCreated is a free data retrieval call binding the contract method 0x29a8791a.
//
// Solidity: function isCreated(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsCreated(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsCreated(&_AgentRegistry.CallOpts, agentId)
}

// IsCreated is a free data retrieval call binding the contract method 0x29a8791a.
//
// Solidity: function isCreated(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsCreated(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsCreated(&_AgentRegistry.CallOpts, agentId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsEnabled(opts *bind.CallOpts, agentId *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isEnabled", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsEnabled(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsEnabled(&_AgentRegistry.CallOpts, agentId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsEnabled(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsEnabled(&_AgentRegistry.CallOpts, agentId)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsStakedOverMin(opts *bind.CallOpts, subject *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isStakedOverMin", subject)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsStakedOverMin(&_AgentRegistry.CallOpts, subject)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsStakedOverMin(&_AgentRegistry.CallOpts, subject)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsTrustedForwarder(&_AgentRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsTrustedForwarder(&_AgentRegistry.CallOpts, forwarder)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Name() (string, error) {
	return _AgentRegistry.Contract.Name(&_AgentRegistry.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Name() (string, error) {
	return _AgentRegistry.Contract.Name(&_AgentRegistry.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistrySession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.OwnerOf(&_AgentRegistry.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.OwnerOf(&_AgentRegistry.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AgentRegistry.Contract.SupportsInterface(&_AgentRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AgentRegistry.Contract.SupportsInterface(&_AgentRegistry.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Symbol() (string, error) {
	return _AgentRegistry.Contract.Symbol(&_AgentRegistry.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Symbol() (string, error) {
	return _AgentRegistry.Contract.Symbol(&_AgentRegistry.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistrySession) TokenURI(tokenId *big.Int) (string, error) {
	return _AgentRegistry.Contract.TokenURI(&_AgentRegistry.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AgentRegistry.Contract.TokenURI(&_AgentRegistry.CallOpts, tokenId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Version() (string, error) {
	return _AgentRegistry.Contract.Version(&_AgentRegistry.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Version() (string, error) {
	return _AgentRegistry.Contract.Version(&_AgentRegistry.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Approve(&_AgentRegistry.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Approve(&_AgentRegistry.TransactOpts, to, tokenId)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address owner, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) CreateAgent(opts *bind.TransactOpts, agentId *big.Int, owner common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "createAgent", agentId, owner, metadata, chainIds)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address owner, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) CreateAgent(agentId *big.Int, owner common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.CreateAgent(&_AgentRegistry.TransactOpts, agentId, owner, metadata, chainIds)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address owner, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) CreateAgent(agentId *big.Int, owner common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.CreateAgent(&_AgentRegistry.TransactOpts, agentId, owner, metadata, chainIds)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactor) DisableAgent(opts *bind.TransactOpts, agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "disableAgent", agentId, permission)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistrySession) DisableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) DisableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactor) EnableAgent(opts *bind.TransactOpts, agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "enableAgent", agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistrySession) EnableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.EnableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) EnableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.EnableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistryTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "initialize", __manager, __router, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistrySession) Initialize(__manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Initialize(&_AgentRegistry.TransactOpts, __manager, __router, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) Initialize(__manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Initialize(&_AgentRegistry.TransactOpts, __manager, __router, __name, __symbol)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistrySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Multicall(&_AgentRegistry.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Multicall(&_AgentRegistry.TransactOpts, data)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistryTransactor) PrepareAgent(opts *bind.TransactOpts, commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "prepareAgent", commit)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistrySession) PrepareAgent(commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.PrepareAgent(&_AgentRegistry.TransactOpts, commit)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) PrepareAgent(commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.PrepareAgent(&_AgentRegistry.TransactOpts, commit)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_AgentRegistry *AgentRegistryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_AgentRegistry *AgentRegistrySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom0(&_AgentRegistry.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom0(&_AgentRegistry.TransactOpts, from, to, tokenId, _data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistrySession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetAccessManager(&_AgentRegistry.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetAccessManager(&_AgentRegistry.TransactOpts, newManager)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistrySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetApprovalForAll(&_AgentRegistry.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetApprovalForAll(&_AgentRegistry.TransactOpts, operator, approved)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetFrontRunningDelay(opts *bind.TransactOpts, delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setFrontRunningDelay", delay)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistrySession) SetFrontRunningDelay(delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetFrontRunningDelay(&_AgentRegistry.TransactOpts, delay)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetFrontRunningDelay(delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetFrontRunningDelay(&_AgentRegistry.TransactOpts, delay)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistrySession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetName(&_AgentRegistry.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetName(&_AgentRegistry.TransactOpts, ensRegistry, ensName)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setRouter", newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_AgentRegistry *AgentRegistrySession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetRouter(&_AgentRegistry.TransactOpts, newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetRouter(&_AgentRegistry.TransactOpts, newRouter)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetStakeController(opts *bind.TransactOpts, stakeController common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setStakeController", stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_AgentRegistry *AgentRegistrySession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeController(&_AgentRegistry.TransactOpts, stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeController(&_AgentRegistry.TransactOpts, stakeController)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetStakeThreshold(opts *bind.TransactOpts, newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setStakeThreshold", newStakeThreshold)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistrySession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeThreshold(&_AgentRegistry.TransactOpts, newStakeThreshold)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeThreshold(&_AgentRegistry.TransactOpts, newStakeThreshold)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.TransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.TransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) UpdateAgent(opts *bind.TransactOpts, agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "updateAgent", agentId, metadata, chainIds)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) UpdateAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpdateAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpdateAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpdateAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeTo(&_AgentRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeTo(&_AgentRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeToAndCall(&_AgentRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeToAndCall(&_AgentRegistry.TransactOpts, newImplementation, data)
}

// AgentRegistryAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the AgentRegistry contract.
type AgentRegistryAccessManagerUpdatedIterator struct {
	Event *AgentRegistryAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAccessManagerUpdated represents a AccessManagerUpdated event raised by the AgentRegistry contract.
type AgentRegistryAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*AgentRegistryAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAccessManagerUpdatedIterator{contract: _AgentRegistry.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAccessManagerUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) ParseAccessManagerUpdated(log types.Log) (*AgentRegistryAccessManagerUpdated, error) {
	event := new(AgentRegistryAccessManagerUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AgentRegistry contract.
type AgentRegistryAdminChangedIterator struct {
	Event *AgentRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAdminChanged represents a AdminChanged event raised by the AgentRegistry contract.
type AgentRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AgentRegistryAdminChangedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAdminChangedIterator{contract: _AgentRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AgentRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAdminChanged)
				if err := _AgentRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) ParseAdminChanged(log types.Log) (*AgentRegistryAdminChanged, error) {
	event := new(AgentRegistryAdminChanged)
	if err := _AgentRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentCommittedIterator is returned from FilterAgentCommitted and is used to iterate over the raw logs and unpacked data for AgentCommitted events raised by the AgentRegistry contract.
type AgentRegistryAgentCommittedIterator struct {
	Event *AgentRegistryAgentCommitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentCommittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentCommitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentCommitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentCommittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentCommittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentCommitted represents a AgentCommitted event raised by the AgentRegistry contract.
type AgentRegistryAgentCommitted struct {
	Commit [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAgentCommitted is a free log retrieval operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentCommitted(opts *bind.FilterOpts, commit [][32]byte) (*AgentRegistryAgentCommittedIterator, error) {

	var commitRule []interface{}
	for _, commitItem := range commit {
		commitRule = append(commitRule, commitItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentCommitted", commitRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentCommittedIterator{contract: _AgentRegistry.contract, event: "AgentCommitted", logs: logs, sub: sub}, nil
}

// WatchAgentCommitted is a free log subscription operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentCommitted(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentCommitted, commit [][32]byte) (event.Subscription, error) {

	var commitRule []interface{}
	for _, commitItem := range commit {
		commitRule = append(commitRule, commitItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentCommitted", commitRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentCommitted)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentCommitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentCommitted is a log parse operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentCommitted(log types.Log) (*AgentRegistryAgentCommitted, error) {
	event := new(AgentRegistryAgentCommitted)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentCommitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentEnabledIterator is returned from FilterAgentEnabled and is used to iterate over the raw logs and unpacked data for AgentEnabled events raised by the AgentRegistry contract.
type AgentRegistryAgentEnabledIterator struct {
	Event *AgentRegistryAgentEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentEnabled represents a AgentEnabled event raised by the AgentRegistry contract.
type AgentRegistryAgentEnabled struct {
	AgentId    *big.Int
	Enabled    bool
	Permission uint8
	Value      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAgentEnabled is a free log retrieval operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentEnabled(opts *bind.FilterOpts, agentId []*big.Int, enabled []bool) (*AgentRegistryAgentEnabledIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentEnabled", agentIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentEnabledIterator{contract: _AgentRegistry.contract, event: "AgentEnabled", logs: logs, sub: sub}, nil
}

// WatchAgentEnabled is a free log subscription operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentEnabled(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentEnabled, agentId []*big.Int, enabled []bool) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentEnabled", agentIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentEnabled)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentEnabled is a log parse operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentEnabled(log types.Log) (*AgentRegistryAgentEnabled, error) {
	event := new(AgentRegistryAgentEnabled)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentUpdatedIterator is returned from FilterAgentUpdated and is used to iterate over the raw logs and unpacked data for AgentUpdated events raised by the AgentRegistry contract.
type AgentRegistryAgentUpdatedIterator struct {
	Event *AgentRegistryAgentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentUpdated represents a AgentUpdated event raised by the AgentRegistry contract.
type AgentRegistryAgentUpdated struct {
	AgentId  *big.Int
	By       common.Address
	Metadata string
	ChainIds []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAgentUpdated is a free log retrieval operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentUpdated(opts *bind.FilterOpts, agentId []*big.Int, by []common.Address) (*AgentRegistryAgentUpdatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var byRule []interface{}
	for _, byItem := range by {
		byRule = append(byRule, byItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentUpdated", agentIdRule, byRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentUpdatedIterator{contract: _AgentRegistry.contract, event: "AgentUpdated", logs: logs, sub: sub}, nil
}

// WatchAgentUpdated is a free log subscription operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentUpdated, agentId []*big.Int, by []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var byRule []interface{}
	for _, byItem := range by {
		byRule = append(byRule, byItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentUpdated", agentIdRule, byRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentUpdated is a log parse operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentUpdated(log types.Log) (*AgentRegistryAgentUpdated, error) {
	event := new(AgentRegistryAgentUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AgentRegistry contract.
type AgentRegistryApprovalIterator struct {
	Event *AgentRegistryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryApproval represents a Approval event raised by the AgentRegistry contract.
type AgentRegistryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*AgentRegistryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryApprovalIterator{contract: _AgentRegistry.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AgentRegistryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryApproval)
				if err := _AgentRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) ParseApproval(log types.Log) (*AgentRegistryApproval, error) {
	event := new(AgentRegistryApproval)
	if err := _AgentRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the AgentRegistry contract.
type AgentRegistryApprovalForAllIterator struct {
	Event *AgentRegistryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryApprovalForAll represents a ApprovalForAll event raised by the AgentRegistry contract.
type AgentRegistryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*AgentRegistryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryApprovalForAllIterator{contract: _AgentRegistry.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *AgentRegistryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryApprovalForAll)
				if err := _AgentRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) ParseApprovalForAll(log types.Log) (*AgentRegistryApprovalForAll, error) {
	event := new(AgentRegistryApprovalForAll)
	if err := _AgentRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the AgentRegistry contract.
type AgentRegistryBeaconUpgradedIterator struct {
	Event *AgentRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the AgentRegistry contract.
type AgentRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*AgentRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryBeaconUpgradedIterator{contract: _AgentRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *AgentRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryBeaconUpgraded)
				if err := _AgentRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*AgentRegistryBeaconUpgraded, error) {
	event := new(AgentRegistryBeaconUpgraded)
	if err := _AgentRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryFrontRunningDelaySetIterator is returned from FilterFrontRunningDelaySet and is used to iterate over the raw logs and unpacked data for FrontRunningDelaySet events raised by the AgentRegistry contract.
type AgentRegistryFrontRunningDelaySetIterator struct {
	Event *AgentRegistryFrontRunningDelaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryFrontRunningDelaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryFrontRunningDelaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryFrontRunningDelaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryFrontRunningDelaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryFrontRunningDelaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryFrontRunningDelaySet represents a FrontRunningDelaySet event raised by the AgentRegistry contract.
type AgentRegistryFrontRunningDelaySet struct {
	Delay *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterFrontRunningDelaySet is a free log retrieval operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) FilterFrontRunningDelaySet(opts *bind.FilterOpts) (*AgentRegistryFrontRunningDelaySetIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "FrontRunningDelaySet")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryFrontRunningDelaySetIterator{contract: _AgentRegistry.contract, event: "FrontRunningDelaySet", logs: logs, sub: sub}, nil
}

// WatchFrontRunningDelaySet is a free log subscription operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) WatchFrontRunningDelaySet(opts *bind.WatchOpts, sink chan<- *AgentRegistryFrontRunningDelaySet) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "FrontRunningDelaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryFrontRunningDelaySet)
				if err := _AgentRegistry.contract.UnpackLog(event, "FrontRunningDelaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFrontRunningDelaySet is a log parse operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) ParseFrontRunningDelaySet(log types.Log) (*AgentRegistryFrontRunningDelaySet, error) {
	event := new(AgentRegistryFrontRunningDelaySet)
	if err := _AgentRegistry.contract.UnpackLog(event, "FrontRunningDelaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the AgentRegistry contract.
type AgentRegistryRouterUpdatedIterator struct {
	Event *AgentRegistryRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryRouterUpdated represents a RouterUpdated event raised by the AgentRegistry contract.
type AgentRegistryRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*AgentRegistryRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryRouterUpdatedIterator{contract: _AgentRegistry.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryRouterUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) ParseRouterUpdated(log types.Log) (*AgentRegistryRouterUpdated, error) {
	event := new(AgentRegistryRouterUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryStakeControllerUpdatedIterator is returned from FilterStakeControllerUpdated and is used to iterate over the raw logs and unpacked data for StakeControllerUpdated events raised by the AgentRegistry contract.
type AgentRegistryStakeControllerUpdatedIterator struct {
	Event *AgentRegistryStakeControllerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryStakeControllerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryStakeControllerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryStakeControllerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryStakeControllerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryStakeControllerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryStakeControllerUpdated represents a StakeControllerUpdated event raised by the AgentRegistry contract.
type AgentRegistryStakeControllerUpdated struct {
	NewstakeController common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterStakeControllerUpdated is a free log retrieval operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_AgentRegistry *AgentRegistryFilterer) FilterStakeControllerUpdated(opts *bind.FilterOpts, newstakeController []common.Address) (*AgentRegistryStakeControllerUpdatedIterator, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryStakeControllerUpdatedIterator{contract: _AgentRegistry.contract, event: "StakeControllerUpdated", logs: logs, sub: sub}, nil
}

// WatchStakeControllerUpdated is a free log subscription operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_AgentRegistry *AgentRegistryFilterer) WatchStakeControllerUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryStakeControllerUpdated, newstakeController []common.Address) (event.Subscription, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryStakeControllerUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeControllerUpdated is a log parse operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_AgentRegistry *AgentRegistryFilterer) ParseStakeControllerUpdated(log types.Log) (*AgentRegistryStakeControllerUpdated, error) {
	event := new(AgentRegistryStakeControllerUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryStakeThresholdChangedIterator is returned from FilterStakeThresholdChanged and is used to iterate over the raw logs and unpacked data for StakeThresholdChanged events raised by the AgentRegistry contract.
type AgentRegistryStakeThresholdChangedIterator struct {
	Event *AgentRegistryStakeThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryStakeThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryStakeThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryStakeThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryStakeThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryStakeThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryStakeThresholdChanged represents a StakeThresholdChanged event raised by the AgentRegistry contract.
type AgentRegistryStakeThresholdChanged struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeThresholdChanged is a free log retrieval operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) FilterStakeThresholdChanged(opts *bind.FilterOpts) (*AgentRegistryStakeThresholdChangedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "StakeThresholdChanged")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryStakeThresholdChangedIterator{contract: _AgentRegistry.contract, event: "StakeThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchStakeThresholdChanged is a free log subscription operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) WatchStakeThresholdChanged(opts *bind.WatchOpts, sink chan<- *AgentRegistryStakeThresholdChanged) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "StakeThresholdChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryStakeThresholdChanged)
				if err := _AgentRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeThresholdChanged is a log parse operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) ParseStakeThresholdChanged(log types.Log) (*AgentRegistryStakeThresholdChanged, error) {
	event := new(AgentRegistryStakeThresholdChanged)
	if err := _AgentRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AgentRegistry contract.
type AgentRegistryTransferIterator struct {
	Event *AgentRegistryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryTransfer represents a Transfer event raised by the AgentRegistry contract.
type AgentRegistryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*AgentRegistryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryTransferIterator{contract: _AgentRegistry.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AgentRegistryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryTransfer)
				if err := _AgentRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) ParseTransfer(log types.Log) (*AgentRegistryTransfer, error) {
	event := new(AgentRegistryTransfer)
	if err := _AgentRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AgentRegistry contract.
type AgentRegistryUpgradedIterator struct {
	Event *AgentRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryUpgraded represents a Upgraded event raised by the AgentRegistry contract.
type AgentRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AgentRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryUpgradedIterator{contract: _AgentRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AgentRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryUpgraded)
				if err := _AgentRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) ParseUpgraded(log types.Log) (*AgentRegistryUpgraded, error) {
	event := new(AgentRegistryUpgraded)
	if err := _AgentRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
