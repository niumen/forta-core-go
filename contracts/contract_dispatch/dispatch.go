// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_dispatch

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DispatchMetaData contains all meta data concerning the Dispatch contract.
var DispatchMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"AlreadyLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"agentAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"agentHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"manifest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"agentRefAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRegistry\",\"outputs\":[{\"internalType\":\"contractAgentRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"areTheyLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__agents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__scanners\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"numAgentsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"numScannersFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"scannerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"scannerHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"manifest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"scannerRefAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scannerRegistry\",\"outputs\":[{\"internalType\":\"contractScannerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAgentRegistry\",\"type\":\"address\"}],\"name\":\"setAgentRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newScannerRegistry\",\"type\":\"address\"}],\"name\":\"setScannerRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"unlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b50604051620030e4380380620030e4833981016040819052620000389162000105565b6001600160a01b038116608052600054610100900460ff16806200005f575060005460ff16155b620000c75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000ea576000805461ffff19166101011790555b8015620000fd576000805461ff00191690555b505062000137565b6000602082840312156200011857600080fd5b81516001600160a01b03811681146200013057600080fd5b9392505050565b60805160a051612f6b620001796000396000818161099e01528181610a2301528181610b4b0152610bd00152600081816103710152611ebe0152612f6b6000f3fe60806040526004361061018b5760003560e01c80635e9f88b1116100d6578063bd3c3a1a1161007f578063c958080411610059578063c958080414610504578063e47db78714610524578063f8c8765e1461054457600080fd5b8063bd3c3a1a146104a4578063c0d78655146104c4578063c2c2e46a146104e457600080fd5b80638b2e98d6116100b05780638b2e98d614610410578063ac9650d814610442578063b1774f9d1461046f57600080fd5b80635e9f88b1146103b15780636b254492146103d057806386cf48e7146103f057600080fd5b80633659cfe6116101385780634f1ef286116101125780634f1ef286146102eb57806354fd4d50146102fe578063572b6c051461035457600080fd5b80633659cfe61461028b5780633820d243146102ab5780633ce22acf146102cb57600080fd5b806328342ecf1161016957806328342ecf146102185780633121db1c1461023857806332dee2f61461025857600080fd5b80630c65b39d146101905780630d1cfcae146101b25780630d80a136146101ea575b600080fd5b34801561019c57600080fd5b506101b06101ab366004612529565b610564565b005b3480156101be57600080fd5b5061012d546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101f657600080fd5b5061020a610205366004612529565b610821565b6040519081526020016101e1565b34801561022457600080fd5b506101b0610233366004612560565b610843565b34801561024457600080fd5b506101b061025336600461257d565b610882565b34801561026457600080fd5b50610278610273366004612529565b6108cd565b6040516101e1979695949392919061265a565b34801561029757600080fd5b506101b06102a6366004612560565b610993565b3480156102b757600080fd5b5061020a6102c63660046126e4565b610b0f565b3480156102d757600080fd5b5061020a6102e6366004612529565b610b27565b6101b06102f936600461276c565b610b40565b34801561030a57600080fd5b506103476040518060400160405280600581526020017f302e312e3300000000000000000000000000000000000000000000000000000081525081565b6040516101e191906127ff565b34801561036057600080fd5b506103a161036f366004612560565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016101e1565b3480156103bd57600080fd5b5061012e546001600160a01b03166101cd565b3480156103dc57600080fd5b506101b06103eb366004612560565b610cad565b3480156103fc57600080fd5b506101b061040b366004612529565b610cec565b34801561041c57600080fd5b5061043061042b366004612529565b610f1c565b6040516101e196959493929190612812565b34801561044e57600080fd5b5061046261045d36600461285d565b610fdf565b6040516101e191906128d2565b34801561047b57600080fd5b5061048f61048a3660046126e4565b6110d4565b604080519283526020830191909152016101e1565b3480156104b057600080fd5b5061020a6104bf3660046126e4565b611365565b3480156104d057600080fd5b506101b06104df366004612560565b61137d565b3480156104f057600080fd5b5061048f6104ff3660046126e4565b61143a565b34801561051057600080fd5b506101b061051f366004612560565b6115b7565b34801561053057600080fd5b506103a161053f366004612529565b611675565b34801561055057600080fd5b506101b061055f366004612934565b6116ae565b7ffbd38eecf51668fdbc772b204dc63dd28c3a3cf32e3025f52a80aa807359f50c610596816105916117a9565b6117b8565b6105ec57806105a36117a9565b6040517f75000dc000000000000000000000000000000000000000000000000000000000815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b61012d546040517f29a8791a000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03909116906329a8791a9060240160206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906129a5565b6106a1578260405163b087f9a560e01b81526004016105e391906129c0565b61012e546040517f579a6988000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039091169063579a69889060240160206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906129a5565b610756578160405163b087f9a560e01b81526004016105e391906129f3565b600082815261012f6020526040902061076f9084611856565b1580610791575060008381526101306020526040902061078f9083611856565b155b156107e05760408051848152602081018490526000918101919091527f3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430906060015b60405180910390a1505050565b60408051848152602081018490526000918101919091527ff1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf906060016107d3565b60008281526101306020526040812061083a9083611862565b90505b92915050565b6000610851816105916117a9565b61085e57806105a36117a9565b5061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a6108af816105916117a9565b6108bc57806105a36117a9565b6108c784848461186e565b50505050565b60008060008060608060006108e28989610b27565b61012d546040517f1e4def83000000000000000000000000000000000000000000000000000000008152600481018390529196506001600160a01b031690631e4def839060240160006040518083038186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097d9190810190612ae7565b949e939d50989b50909950975090945092505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a215760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016105e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a7c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610ae75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016105e3565b610af08161199d565b60408051600080825260208201909252610b0c918391906119d7565b50565b60008181526101306020526040812061083d90611b94565b600082815261012f6020526040812061083a9083611862565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610bce5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084016105e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c297f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614610c945760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b60648201526084016105e3565b610c9d8261199d565b610ca9828260016119d7565b5050565b6000610cbb816105916117a9565b610cc857806105a36117a9565b5061012e80546001600160a01b0319166001600160a01b0392909216919091179055565b7ffbd38eecf51668fdbc772b204dc63dd28c3a3cf32e3025f52a80aa807359f50c610d19816105916117a9565b610d2657806105a36117a9565b61012d546040516331e0c0d360e21b8152600481018590526001600160a01b039091169063c783034c9060240160206040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da391906129a5565b610dc057604051631429691d60e01b81526004016105e390612b88565b61012e546040516331e0c0d360e21b8152600481018490526001600160a01b039091169063c783034c9060240160206040518083038186803b158015610e0557600080fd5b505afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3d91906129a5565b610e5a57604051631429691d60e01b81526004016105e390612bad565b600082815261012f60205260409020610e739084611b9e565b1580610e955750600083815261013060205260409020610e939083611b9e565b155b15610edb5760408051848152602081018490526001918101919091527f3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430906060016107d3565b60408051848152602081018490526001918101919091527ff1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf906060016107d3565b60008060008060606000610f308888610821565b61012e546040517f37fea0e0000000000000000000000000000000000000000000000000000000008152600481018390529196506001600160a01b0316906337fea0e09060240160006040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcb9190810190612bd4565b939c989b5091995097509590945092505050565b60608167ffffffffffffffff811115610ffa57610ffa6126fd565b60405190808252806020026020018201604052801561102d57816020015b60608152602001906001900390816110185790505b50905060005b828110156110cd5761109d3085858481811061105157611051612c50565b90506020028101906110639190612c66565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611baa92505050565b8282815181106110af576110af612c50565b602002602001018190525080806110c590612cca565b915050611033565b5092915050565b600081815261012f60205260408120819081906110f090611bcf565b90506000815167ffffffffffffffff81111561110e5761110e6126fd565b604051908082528060200260200182016040528015611137578160200160208202803683370190505b5090506000825167ffffffffffffffff811115611156576111566126fd565b60405190808252806020026020018201604052801561117f578160200160208202803683370190505b50905060005b835181101561132b5761012d5484516001600160a01b0390911690632de5aaf7908690849081106111b8576111b8612c50565b60200260200101516040518263ffffffff1660e01b81526004016111de91815260200190565b60006040518083038186803b1580156111f657600080fd5b505afa15801561120a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112329190810190612ce5565b505085519092508591508390811061124c5761124c612c50565b602090810291909101015261012d5484516001600160a01b039091169063c783034c9086908490811061128157611281612c50565b60200260200101516040518263ffffffff1660e01b81526004016112a791815260200190565b60206040518083038186803b1580156112bf57600080fd5b505afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f791906129a5565b82828151811061130957611309612c50565b911515602092830291909101909101528061132381612cca565b915050611185565b50825183838360405160200161134393929190612dd4565b6040516020818303038152906040528051906020012094509450505050915091565b600081815261012f6020526040812061083d90611b94565b600061138b816105916117a9565b61139857806105a36117a9565b6001600160a01b0382166113ef5760405163eac0d38960e01b815260206004820152600960248201527f6e6577526f75746572000000000000000000000000000000000000000000000060448201526064016105e3565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a25050565b6000818152610130602052604081208190819061145690611bcf565b90506000815167ffffffffffffffff811115611474576114746126fd565b60405190808252806020026020018201604052801561149d578160200160208202803683370190505b50905060005b82518110156115805761012e5483516001600160a01b039091169063c783034c908590849081106114d6576114d6612c50565b60200260200101516040518263ffffffff1660e01b81526004016114fc91815260200190565b60206040518083038186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c91906129a5565b82828151811061155e5761155e612c50565b911515602092830291909101909101528061157881612cca565b9150506114a3565b5081518282604051602001611596929190612df2565b60405160208183030381529060405280519060200120935093505050915091565b60006115c5816105916117a9565b6115d257806105a36117a9565b6115ec6001600160a01b038316637965db0b60e01b611be3565b61162a576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b60448201526064016105e3565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b600081815261012f6020526040812061168e9084611bff565b801561083a575060008381526101306020526040902061083a9083611bff565b600054610100900460ff16806116c7575060005460ff16155b61172a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e3565b600054610100900460ff1615801561174c576000805461ffff19166101011790555b61175585611c17565b61175e84611d69565b61012d80546001600160a01b038086166001600160a01b03199283161790925561012e80549285169290911691909117905580156117a2576000805461ff00191690555b5050505050565b60006117b3611eba565b905090565b6033546040517f91d14854000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b15801561181e57600080fd5b505afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906129a5565b600061083a8383611f1d565b600061083a8383612010565b6040517f02571be30000000000000000000000000000000000000000000000000000000081527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b1580156118e657600080fd5b505afa1580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e9190612e01565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b815260040161194b929190612e1e565b602060405180830381600087803b15801561196557600080fd5b505af1158015611979573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c79190612e4d565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36119ca816105916117a9565b610ca957806105a36117a9565b6000611a0a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b9050611a158461203a565b600083511180611a225750815b15611a3357611a3184846120ef565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166117a257805460ff191660011781556040516001600160a01b0383166024820152611ae090869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe6000000000000000000000000000000000000000000000000000000001790526120ef565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b03838116911614611b8b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f757274686572207570677261646573000000000000000000000000000000000060648201526084016105e3565b6117a2856121da565b600061083d825490565b600061083a838361221a565b606061083a8383604051806060016040528060278152602001612f0f60279139612269565b60606000611bdc8361233d565b9392505050565b6000611bee83612399565b801561083a575061083a83836123e4565b6000818152600183016020526040812054151561083a565b600054610100900460ff1680611c30575060005460ff16155b611c935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e3565b600054610100900460ff16158015611cb5576000805461ffff19166101011790555b611ccf6001600160a01b038316637965db0b60e01b611be3565b611d0d576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b60448201526064016105e3565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610ca9576000805461ff00191690555050565b600054610100900460ff1680611d82575060005460ff16155b611de55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e3565b600054610100900460ff16158015611e07576000805461ffff19166101011790555b6001600160a01b038216611e5e5760405163eac0d38960e01b815260206004820152600660248201527f726f75746572000000000000000000000000000000000000000000000000000060448201526064016105e3565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a28015610ca9576000805461ff00191690555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415611f1857600036611efb601482612e66565b611f0792369290612e7d565b611f1091612ea7565b60601c905090565b503390565b60008181526001830160205260408120548015612006576000611f41600183612e66565b8554909150600090611f5590600190612e66565b9050818114611fba576000866000018281548110611f7557611f75612c50565b9060005260206000200154905080876000018481548110611f9857611f98612c50565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fcb57611fcb612edc565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061083d565b600091505061083d565b600082600001828154811061202757612027612c50565b9060005260206000200154905092915050565b803b6120ae5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016105e3565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61214e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105e3565b600080846001600160a01b0316846040516121699190612ef2565b600060405180830381855af49150503d80600081146121a4576040519150601f19603f3d011682016040523d82523d6000602084013e6121a9565b606091505b50915091506121d18282604051806060016040528060278152602001612f0f602791396124f0565b95945050505050565b6121e38161203a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60008181526001830160205260408120546122615750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561083d565b50600061083d565b6060833b6122c85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105e3565b600080856001600160a01b0316856040516122e39190612ef2565b600060405180830381855af49150503d806000811461231e576040519150601f19603f3d011682016040523d82523d6000602084013e612323565b606091505b50915091506123338282866124f0565b9695505050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561238d57602002820191906000526020600020905b815481526020019060010190808311612379575b50505050509050919050565b60006123ac826301ffc9a760e01b6123e4565b801561083d57506123dd827fffffffff000000000000000000000000000000000000000000000000000000006123e4565b1592915050565b604080517fffffffff00000000000000000000000000000000000000000000000000000000831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612478908690612ef2565b6000604051808303818686fa925050503d80600081146124b4576040519150601f19603f3d011682016040523d82523d6000602084013e6124b9565b606091505b50915091506020815110156124d4576000935050505061083d565b81801561233357508080602001905181019061233391906129a5565b606083156124ff575081611bdc565b82511561250f5782518084602001fd5b8160405162461bcd60e51b81526004016105e391906127ff565b6000806040838503121561253c57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610b0c57600080fd5b60006020828403121561257257600080fd5b8135611bdc8161254b565b60008060006040848603121561259257600080fd5b833561259d8161254b565b9250602084013567ffffffffffffffff808211156125ba57600080fd5b818601915086601f8301126125ce57600080fd5b8135818111156125dd57600080fd5b8760208285010111156125ef57600080fd5b6020830194508093505050509250925092565b60005b8381101561261d578181015183820152602001612605565b838111156108c75750506000910152565b60008151808452612646816020860160208601612602565b601f01601f19169290920160200192915050565b8715158152600060206001600160a01b0389168184015287604084015286606084015260e0608084015261269160e084018761262e565b83810360a085015285518082528287019183019060005b818110156126c4578351835292840192918401916001016126a8565b505085151560c086015292506126d8915050565b98975050505050505050565b6000602082840312156126f657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561273c5761273c6126fd565b604052919050565b600067ffffffffffffffff82111561275e5761275e6126fd565b50601f01601f191660200190565b6000806040838503121561277f57600080fd5b823561278a8161254b565b9150602083013567ffffffffffffffff8111156127a657600080fd5b8301601f810185136127b757600080fd5b80356127ca6127c582612744565b612713565b8181528660208385010111156127df57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60208152600061083a602083018461262e565b86151581528560208201526001600160a01b038516604082015283606082015260c06080820152600061284860c083018561262e565b905082151560a0830152979650505050505050565b6000806020838503121561287057600080fd5b823567ffffffffffffffff8082111561288857600080fd5b818501915085601f83011261289c57600080fd5b8135818111156128ab57600080fd5b8660208260051b85010111156128c057600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561292757603f1988860301845261291585835161262e565b945092850192908501906001016128f9565b5092979650505050505050565b6000806000806080858703121561294a57600080fd5b84356129558161254b565b935060208501356129658161254b565b925060408501356129758161254b565b915060608501356129858161254b565b939692955090935050565b805180151581146129a057600080fd5b919050565b6000602082840312156129b757600080fd5b61083a82612990565b6040815260006129e56040830160058152641059d95b9d60da1b602082015260400190565b905082602083015292915050565b6040815260006129e560408301600781526629b1b0b73732b960c91b602082015260400190565b600082601f830112612a2b57600080fd5b8151612a396127c582612744565b818152846020838601011115612a4e57600080fd5b612a5f826020830160208701612602565b949350505050565b600082601f830112612a7857600080fd5b8151602067ffffffffffffffff821115612a9457612a946126fd565b8160051b612aa3828201612713565b9283528481018201928281019087851115612abd57600080fd5b83870192505b84831015612adc57825182529183019190830190612ac3565b979650505050505050565b60008060008060008060c08789031215612b0057600080fd5b612b0987612990565b95506020870151612b198161254b565b60408801516060890151919650945067ffffffffffffffff80821115612b3e57600080fd5b612b4a8a838b01612a1a565b94506080890151915080821115612b6057600080fd5b50612b6d89828a01612a67565b925050612b7c60a08801612990565b90509295509295509295565b60208152600061083d6020830160058152641059d95b9d60da1b602082015260400190565b60208152600061083d60208301600781526629b1b0b73732b960c91b602082015260400190565b600080600080600060a08688031215612bec57600080fd5b612bf586612990565b94506020860151612c058161254b565b60408701516060880151919550935067ffffffffffffffff811115612c2957600080fd5b612c3588828901612a1a565b925050612c4460808701612990565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612c7d57600080fd5b83018035915067ffffffffffffffff821115612c9857600080fd5b602001915036819003821315612cad57600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612cde57612cde612cb4565b5060010190565b600080600080600060a08688031215612cfd57600080fd5b612d0686612990565b94506020860151612d168161254b565b60408701516060880151919550935067ffffffffffffffff80821115612d3b57600080fd5b612d4789838a01612a1a565b93506080880151915080821115612d5d57600080fd5b50612d6a88828901612a67565b9150509295509295909350565b60008151602080840160005b83811015612d9f57815187529582019590820190600101612d83565b509495945050505050565b60008151602080840160005b83811015612d9f578151151587529582019590820190600101612db6565b60006121d1612dec612de68488612d77565b86612d77565b84612daa565b6000612a5f612dec8386612d77565b600060208284031215612e1357600080fd5b8151611bdc8161254b565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215612e5f57600080fd5b5051919050565b600082821015612e7857612e78612cb4565b500390565b60008085851115612e8d57600080fd5b83861115612e9a57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015612ed45780818660140360031b1b83161692505b505092915050565b634e487b7160e01b600052603160045260246000fd5b60008251612f04818460208701612602565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aec76eaf41c3b73a5ba668fb13481f88bc9cf4b2a15c41f7f9fe907a0011fe4e64736f6c63430008090033",
}

// DispatchABI is the input ABI used to generate the binding from.
// Deprecated: Use DispatchMetaData.ABI instead.
var DispatchABI = DispatchMetaData.ABI

// DispatchBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DispatchMetaData.Bin instead.
var DispatchBin = DispatchMetaData.Bin

// DeployDispatch deploys a new Ethereum contract, binding an instance of Dispatch to it.
func DeployDispatch(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *Dispatch, error) {
	parsed, err := DispatchMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DispatchBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Dispatch{DispatchCaller: DispatchCaller{contract: contract}, DispatchTransactor: DispatchTransactor{contract: contract}, DispatchFilterer: DispatchFilterer{contract: contract}}, nil
}

// Dispatch is an auto generated Go binding around an Ethereum contract.
type Dispatch struct {
	DispatchCaller     // Read-only binding to the contract
	DispatchTransactor // Write-only binding to the contract
	DispatchFilterer   // Log filterer for contract events
}

// DispatchCaller is an auto generated read-only Go binding around an Ethereum contract.
type DispatchCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DispatchTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DispatchTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DispatchFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DispatchFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DispatchSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DispatchSession struct {
	Contract     *Dispatch         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DispatchCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DispatchCallerSession struct {
	Contract *DispatchCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// DispatchTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DispatchTransactorSession struct {
	Contract     *DispatchTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DispatchRaw is an auto generated low-level Go binding around an Ethereum contract.
type DispatchRaw struct {
	Contract *Dispatch // Generic contract binding to access the raw methods on
}

// DispatchCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DispatchCallerRaw struct {
	Contract *DispatchCaller // Generic read-only contract binding to access the raw methods on
}

// DispatchTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DispatchTransactorRaw struct {
	Contract *DispatchTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDispatch creates a new instance of Dispatch, bound to a specific deployed contract.
func NewDispatch(address common.Address, backend bind.ContractBackend) (*Dispatch, error) {
	contract, err := bindDispatch(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Dispatch{DispatchCaller: DispatchCaller{contract: contract}, DispatchTransactor: DispatchTransactor{contract: contract}, DispatchFilterer: DispatchFilterer{contract: contract}}, nil
}

// NewDispatchCaller creates a new read-only instance of Dispatch, bound to a specific deployed contract.
func NewDispatchCaller(address common.Address, caller bind.ContractCaller) (*DispatchCaller, error) {
	contract, err := bindDispatch(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DispatchCaller{contract: contract}, nil
}

// NewDispatchTransactor creates a new write-only instance of Dispatch, bound to a specific deployed contract.
func NewDispatchTransactor(address common.Address, transactor bind.ContractTransactor) (*DispatchTransactor, error) {
	contract, err := bindDispatch(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DispatchTransactor{contract: contract}, nil
}

// NewDispatchFilterer creates a new log filterer instance of Dispatch, bound to a specific deployed contract.
func NewDispatchFilterer(address common.Address, filterer bind.ContractFilterer) (*DispatchFilterer, error) {
	contract, err := bindDispatch(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DispatchFilterer{contract: contract}, nil
}

// bindDispatch binds a generic wrapper to an already deployed contract.
func bindDispatch(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DispatchABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dispatch *DispatchRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Dispatch.Contract.DispatchCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dispatch *DispatchRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dispatch.Contract.DispatchTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dispatch *DispatchRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dispatch.Contract.DispatchTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dispatch *DispatchCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Dispatch.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dispatch *DispatchTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dispatch.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dispatch *DispatchTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dispatch.Contract.contract.Transact(opts, method, params...)
}

// AgentAt is a free data retrieval call binding the contract method 0x3ce22acf.
//
// Solidity: function agentAt(uint256 scannerId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCaller) AgentAt(opts *bind.CallOpts, scannerId *big.Int, pos *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentAt", scannerId, pos)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AgentAt is a free data retrieval call binding the contract method 0x3ce22acf.
//
// Solidity: function agentAt(uint256 scannerId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchSession) AgentAt(scannerId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.AgentAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentAt is a free data retrieval call binding the contract method 0x3ce22acf.
//
// Solidity: function agentAt(uint256 scannerId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCallerSession) AgentAt(scannerId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.AgentAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentHash is a free data retrieval call binding the contract method 0xc2c2e46a.
//
// Solidity: function agentHash(uint256 agentId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCaller) AgentHash(opts *bind.CallOpts, agentId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentHash", agentId)

	outstruct := new(struct {
		Length   *big.Int
		Manifest [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Length = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Manifest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// AgentHash is a free data retrieval call binding the contract method 0xc2c2e46a.
//
// Solidity: function agentHash(uint256 agentId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchSession) AgentHash(agentId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.AgentHash(&_Dispatch.CallOpts, agentId)
}

// AgentHash is a free data retrieval call binding the contract method 0xc2c2e46a.
//
// Solidity: function agentHash(uint256 agentId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCallerSession) AgentHash(agentId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.AgentHash(&_Dispatch.CallOpts, agentId)
}

// AgentRefAt is a free data retrieval call binding the contract method 0x32dee2f6.
//
// Solidity: function agentRefAt(uint256 scannerId, uint256 pos) view returns(bool registered, address owner, uint256 agentId, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled)
func (_Dispatch *DispatchCaller) AgentRefAt(opts *bind.CallOpts, scannerId *big.Int, pos *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentId      *big.Int
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
	Enabled      bool
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentRefAt", scannerId, pos)

	outstruct := new(struct {
		Registered   bool
		Owner        common.Address
		AgentId      *big.Int
		AgentVersion *big.Int
		Metadata     string
		ChainIds     []*big.Int
		Enabled      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AgentVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	outstruct.Enabled = *abi.ConvertType(out[6], new(bool)).(*bool)

	return *outstruct, err

}

// AgentRefAt is a free data retrieval call binding the contract method 0x32dee2f6.
//
// Solidity: function agentRefAt(uint256 scannerId, uint256 pos) view returns(bool registered, address owner, uint256 agentId, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled)
func (_Dispatch *DispatchSession) AgentRefAt(scannerId *big.Int, pos *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentId      *big.Int
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
	Enabled      bool
}, error) {
	return _Dispatch.Contract.AgentRefAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentRefAt is a free data retrieval call binding the contract method 0x32dee2f6.
//
// Solidity: function agentRefAt(uint256 scannerId, uint256 pos) view returns(bool registered, address owner, uint256 agentId, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled)
func (_Dispatch *DispatchCallerSession) AgentRefAt(scannerId *big.Int, pos *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentId      *big.Int
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
	Enabled      bool
}, error) {
	return _Dispatch.Contract.AgentRefAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentRegistry is a free data retrieval call binding the contract method 0x0d1cfcae.
//
// Solidity: function agentRegistry() view returns(address)
func (_Dispatch *DispatchCaller) AgentRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AgentRegistry is a free data retrieval call binding the contract method 0x0d1cfcae.
//
// Solidity: function agentRegistry() view returns(address)
func (_Dispatch *DispatchSession) AgentRegistry() (common.Address, error) {
	return _Dispatch.Contract.AgentRegistry(&_Dispatch.CallOpts)
}

// AgentRegistry is a free data retrieval call binding the contract method 0x0d1cfcae.
//
// Solidity: function agentRegistry() view returns(address)
func (_Dispatch *DispatchCallerSession) AgentRegistry() (common.Address, error) {
	return _Dispatch.Contract.AgentRegistry(&_Dispatch.CallOpts)
}

// AreTheyLinked is a free data retrieval call binding the contract method 0xe47db787.
//
// Solidity: function areTheyLinked(uint256 agentId, uint256 scannerId) view returns(bool)
func (_Dispatch *DispatchCaller) AreTheyLinked(opts *bind.CallOpts, agentId *big.Int, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "areTheyLinked", agentId, scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AreTheyLinked is a free data retrieval call binding the contract method 0xe47db787.
//
// Solidity: function areTheyLinked(uint256 agentId, uint256 scannerId) view returns(bool)
func (_Dispatch *DispatchSession) AreTheyLinked(agentId *big.Int, scannerId *big.Int) (bool, error) {
	return _Dispatch.Contract.AreTheyLinked(&_Dispatch.CallOpts, agentId, scannerId)
}

// AreTheyLinked is a free data retrieval call binding the contract method 0xe47db787.
//
// Solidity: function areTheyLinked(uint256 agentId, uint256 scannerId) view returns(bool)
func (_Dispatch *DispatchCallerSession) AreTheyLinked(agentId *big.Int, scannerId *big.Int) (bool, error) {
	return _Dispatch.Contract.AreTheyLinked(&_Dispatch.CallOpts, agentId, scannerId)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Dispatch *DispatchCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Dispatch *DispatchSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Dispatch.Contract.IsTrustedForwarder(&_Dispatch.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Dispatch *DispatchCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Dispatch.Contract.IsTrustedForwarder(&_Dispatch.CallOpts, forwarder)
}

// NumAgentsFor is a free data retrieval call binding the contract method 0xbd3c3a1a.
//
// Solidity: function numAgentsFor(uint256 scannerId) view returns(uint256)
func (_Dispatch *DispatchCaller) NumAgentsFor(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "numAgentsFor", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumAgentsFor is a free data retrieval call binding the contract method 0xbd3c3a1a.
//
// Solidity: function numAgentsFor(uint256 scannerId) view returns(uint256)
func (_Dispatch *DispatchSession) NumAgentsFor(scannerId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumAgentsFor(&_Dispatch.CallOpts, scannerId)
}

// NumAgentsFor is a free data retrieval call binding the contract method 0xbd3c3a1a.
//
// Solidity: function numAgentsFor(uint256 scannerId) view returns(uint256)
func (_Dispatch *DispatchCallerSession) NumAgentsFor(scannerId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumAgentsFor(&_Dispatch.CallOpts, scannerId)
}

// NumScannersFor is a free data retrieval call binding the contract method 0x3820d243.
//
// Solidity: function numScannersFor(uint256 agentId) view returns(uint256)
func (_Dispatch *DispatchCaller) NumScannersFor(opts *bind.CallOpts, agentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "numScannersFor", agentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumScannersFor is a free data retrieval call binding the contract method 0x3820d243.
//
// Solidity: function numScannersFor(uint256 agentId) view returns(uint256)
func (_Dispatch *DispatchSession) NumScannersFor(agentId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumScannersFor(&_Dispatch.CallOpts, agentId)
}

// NumScannersFor is a free data retrieval call binding the contract method 0x3820d243.
//
// Solidity: function numScannersFor(uint256 agentId) view returns(uint256)
func (_Dispatch *DispatchCallerSession) NumScannersFor(agentId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumScannersFor(&_Dispatch.CallOpts, agentId)
}

// ScannerAt is a free data retrieval call binding the contract method 0x0d80a136.
//
// Solidity: function scannerAt(uint256 agentId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCaller) ScannerAt(opts *bind.CallOpts, agentId *big.Int, pos *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerAt", agentId, pos)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScannerAt is a free data retrieval call binding the contract method 0x0d80a136.
//
// Solidity: function scannerAt(uint256 agentId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchSession) ScannerAt(agentId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.ScannerAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerAt is a free data retrieval call binding the contract method 0x0d80a136.
//
// Solidity: function scannerAt(uint256 agentId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCallerSession) ScannerAt(agentId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.ScannerAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerHash is a free data retrieval call binding the contract method 0xb1774f9d.
//
// Solidity: function scannerHash(uint256 scannerId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCaller) ScannerHash(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerHash", scannerId)

	outstruct := new(struct {
		Length   *big.Int
		Manifest [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Length = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Manifest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// ScannerHash is a free data retrieval call binding the contract method 0xb1774f9d.
//
// Solidity: function scannerHash(uint256 scannerId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchSession) ScannerHash(scannerId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.ScannerHash(&_Dispatch.CallOpts, scannerId)
}

// ScannerHash is a free data retrieval call binding the contract method 0xb1774f9d.
//
// Solidity: function scannerHash(uint256 scannerId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCallerSession) ScannerHash(scannerId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.ScannerHash(&_Dispatch.CallOpts, scannerId)
}

// ScannerRefAt is a free data retrieval call binding the contract method 0x8b2e98d6.
//
// Solidity: function scannerRefAt(uint256 agentId, uint256 pos) view returns(bool registered, uint256 scannerId, address owner, uint256 chainId, string metadata, bool enabled)
func (_Dispatch *DispatchCaller) ScannerRefAt(opts *bind.CallOpts, agentId *big.Int, pos *big.Int) (struct {
	Registered bool
	ScannerId  *big.Int
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
	Enabled    bool
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerRefAt", agentId, pos)

	outstruct := new(struct {
		Registered bool
		ScannerId  *big.Int
		Owner      common.Address
		ChainId    *big.Int
		Metadata   string
		Enabled    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ScannerId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Owner = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Enabled = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// ScannerRefAt is a free data retrieval call binding the contract method 0x8b2e98d6.
//
// Solidity: function scannerRefAt(uint256 agentId, uint256 pos) view returns(bool registered, uint256 scannerId, address owner, uint256 chainId, string metadata, bool enabled)
func (_Dispatch *DispatchSession) ScannerRefAt(agentId *big.Int, pos *big.Int) (struct {
	Registered bool
	ScannerId  *big.Int
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
	Enabled    bool
}, error) {
	return _Dispatch.Contract.ScannerRefAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerRefAt is a free data retrieval call binding the contract method 0x8b2e98d6.
//
// Solidity: function scannerRefAt(uint256 agentId, uint256 pos) view returns(bool registered, uint256 scannerId, address owner, uint256 chainId, string metadata, bool enabled)
func (_Dispatch *DispatchCallerSession) ScannerRefAt(agentId *big.Int, pos *big.Int) (struct {
	Registered bool
	ScannerId  *big.Int
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
	Enabled    bool
}, error) {
	return _Dispatch.Contract.ScannerRefAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerRegistry is a free data retrieval call binding the contract method 0x5e9f88b1.
//
// Solidity: function scannerRegistry() view returns(address)
func (_Dispatch *DispatchCaller) ScannerRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScannerRegistry is a free data retrieval call binding the contract method 0x5e9f88b1.
//
// Solidity: function scannerRegistry() view returns(address)
func (_Dispatch *DispatchSession) ScannerRegistry() (common.Address, error) {
	return _Dispatch.Contract.ScannerRegistry(&_Dispatch.CallOpts)
}

// ScannerRegistry is a free data retrieval call binding the contract method 0x5e9f88b1.
//
// Solidity: function scannerRegistry() view returns(address)
func (_Dispatch *DispatchCallerSession) ScannerRegistry() (common.Address, error) {
	return _Dispatch.Contract.ScannerRegistry(&_Dispatch.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Dispatch *DispatchCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Dispatch *DispatchSession) Version() (string, error) {
	return _Dispatch.Contract.Version(&_Dispatch.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Dispatch *DispatchCallerSession) Version() (string, error) {
	return _Dispatch.Contract.Version(&_Dispatch.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address __manager, address __router, address __agents, address __scanners) returns()
func (_Dispatch *DispatchTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __router common.Address, __agents common.Address, __scanners common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "initialize", __manager, __router, __agents, __scanners)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address __manager, address __router, address __agents, address __scanners) returns()
func (_Dispatch *DispatchSession) Initialize(__manager common.Address, __router common.Address, __agents common.Address, __scanners common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.Initialize(&_Dispatch.TransactOpts, __manager, __router, __agents, __scanners)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address __manager, address __router, address __agents, address __scanners) returns()
func (_Dispatch *DispatchTransactorSession) Initialize(__manager common.Address, __router common.Address, __agents common.Address, __scanners common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.Initialize(&_Dispatch.TransactOpts, __manager, __router, __agents, __scanners)
}

// Link is a paid mutator transaction binding the contract method 0x86cf48e7.
//
// Solidity: function link(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactor) Link(opts *bind.TransactOpts, agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "link", agentId, scannerId)
}

// Link is a paid mutator transaction binding the contract method 0x86cf48e7.
//
// Solidity: function link(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchSession) Link(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Link(&_Dispatch.TransactOpts, agentId, scannerId)
}

// Link is a paid mutator transaction binding the contract method 0x86cf48e7.
//
// Solidity: function link(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactorSession) Link(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Link(&_Dispatch.TransactOpts, agentId, scannerId)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Dispatch *DispatchTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Dispatch *DispatchSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Dispatch.Contract.Multicall(&_Dispatch.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Dispatch *DispatchTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Dispatch.Contract.Multicall(&_Dispatch.TransactOpts, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_Dispatch *DispatchTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_Dispatch *DispatchSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAccessManager(&_Dispatch.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_Dispatch *DispatchTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAccessManager(&_Dispatch.TransactOpts, newManager)
}

// SetAgentRegistry is a paid mutator transaction binding the contract method 0x28342ecf.
//
// Solidity: function setAgentRegistry(address newAgentRegistry) returns()
func (_Dispatch *DispatchTransactor) SetAgentRegistry(opts *bind.TransactOpts, newAgentRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setAgentRegistry", newAgentRegistry)
}

// SetAgentRegistry is a paid mutator transaction binding the contract method 0x28342ecf.
//
// Solidity: function setAgentRegistry(address newAgentRegistry) returns()
func (_Dispatch *DispatchSession) SetAgentRegistry(newAgentRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAgentRegistry(&_Dispatch.TransactOpts, newAgentRegistry)
}

// SetAgentRegistry is a paid mutator transaction binding the contract method 0x28342ecf.
//
// Solidity: function setAgentRegistry(address newAgentRegistry) returns()
func (_Dispatch *DispatchTransactorSession) SetAgentRegistry(newAgentRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAgentRegistry(&_Dispatch.TransactOpts, newAgentRegistry)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_Dispatch *DispatchTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_Dispatch *DispatchSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _Dispatch.Contract.SetName(&_Dispatch.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_Dispatch *DispatchTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _Dispatch.Contract.SetName(&_Dispatch.TransactOpts, ensRegistry, ensName)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_Dispatch *DispatchTransactor) SetRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setRouter", newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_Dispatch *DispatchSession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetRouter(&_Dispatch.TransactOpts, newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_Dispatch *DispatchTransactorSession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetRouter(&_Dispatch.TransactOpts, newRouter)
}

// SetScannerRegistry is a paid mutator transaction binding the contract method 0x6b254492.
//
// Solidity: function setScannerRegistry(address newScannerRegistry) returns()
func (_Dispatch *DispatchTransactor) SetScannerRegistry(opts *bind.TransactOpts, newScannerRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setScannerRegistry", newScannerRegistry)
}

// SetScannerRegistry is a paid mutator transaction binding the contract method 0x6b254492.
//
// Solidity: function setScannerRegistry(address newScannerRegistry) returns()
func (_Dispatch *DispatchSession) SetScannerRegistry(newScannerRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetScannerRegistry(&_Dispatch.TransactOpts, newScannerRegistry)
}

// SetScannerRegistry is a paid mutator transaction binding the contract method 0x6b254492.
//
// Solidity: function setScannerRegistry(address newScannerRegistry) returns()
func (_Dispatch *DispatchTransactorSession) SetScannerRegistry(newScannerRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetScannerRegistry(&_Dispatch.TransactOpts, newScannerRegistry)
}

// Unlink is a paid mutator transaction binding the contract method 0x0c65b39d.
//
// Solidity: function unlink(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactor) Unlink(opts *bind.TransactOpts, agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "unlink", agentId, scannerId)
}

// Unlink is a paid mutator transaction binding the contract method 0x0c65b39d.
//
// Solidity: function unlink(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchSession) Unlink(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Unlink(&_Dispatch.TransactOpts, agentId, scannerId)
}

// Unlink is a paid mutator transaction binding the contract method 0x0c65b39d.
//
// Solidity: function unlink(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactorSession) Unlink(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Unlink(&_Dispatch.TransactOpts, agentId, scannerId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Dispatch *DispatchTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Dispatch *DispatchSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeTo(&_Dispatch.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Dispatch *DispatchTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeTo(&_Dispatch.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Dispatch *DispatchTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Dispatch *DispatchSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeToAndCall(&_Dispatch.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Dispatch *DispatchTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeToAndCall(&_Dispatch.TransactOpts, newImplementation, data)
}

// DispatchAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the Dispatch contract.
type DispatchAccessManagerUpdatedIterator struct {
	Event *DispatchAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchAccessManagerUpdated represents a AccessManagerUpdated event raised by the Dispatch contract.
type DispatchAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_Dispatch *DispatchFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*DispatchAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &DispatchAccessManagerUpdatedIterator{contract: _Dispatch.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_Dispatch *DispatchFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *DispatchAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchAccessManagerUpdated)
				if err := _Dispatch.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_Dispatch *DispatchFilterer) ParseAccessManagerUpdated(log types.Log) (*DispatchAccessManagerUpdated, error) {
	event := new(DispatchAccessManagerUpdated)
	if err := _Dispatch.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Dispatch contract.
type DispatchAdminChangedIterator struct {
	Event *DispatchAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchAdminChanged represents a AdminChanged event raised by the Dispatch contract.
type DispatchAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Dispatch *DispatchFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*DispatchAdminChangedIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &DispatchAdminChangedIterator{contract: _Dispatch.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Dispatch *DispatchFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *DispatchAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchAdminChanged)
				if err := _Dispatch.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Dispatch *DispatchFilterer) ParseAdminChanged(log types.Log) (*DispatchAdminChanged, error) {
	event := new(DispatchAdminChanged)
	if err := _Dispatch.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchAlreadyLinkedIterator is returned from FilterAlreadyLinked and is used to iterate over the raw logs and unpacked data for AlreadyLinked events raised by the Dispatch contract.
type DispatchAlreadyLinkedIterator struct {
	Event *DispatchAlreadyLinked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchAlreadyLinkedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchAlreadyLinked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchAlreadyLinked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchAlreadyLinkedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchAlreadyLinkedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchAlreadyLinked represents a AlreadyLinked event raised by the Dispatch contract.
type DispatchAlreadyLinked struct {
	AgentId   *big.Int
	ScannerId *big.Int
	Enable    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAlreadyLinked is a free log retrieval operation binding the contract event 0x3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430.
//
// Solidity: event AlreadyLinked(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) FilterAlreadyLinked(opts *bind.FilterOpts) (*DispatchAlreadyLinkedIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "AlreadyLinked")
	if err != nil {
		return nil, err
	}
	return &DispatchAlreadyLinkedIterator{contract: _Dispatch.contract, event: "AlreadyLinked", logs: logs, sub: sub}, nil
}

// WatchAlreadyLinked is a free log subscription operation binding the contract event 0x3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430.
//
// Solidity: event AlreadyLinked(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) WatchAlreadyLinked(opts *bind.WatchOpts, sink chan<- *DispatchAlreadyLinked) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "AlreadyLinked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchAlreadyLinked)
				if err := _Dispatch.contract.UnpackLog(event, "AlreadyLinked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlreadyLinked is a log parse operation binding the contract event 0x3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430.
//
// Solidity: event AlreadyLinked(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) ParseAlreadyLinked(log types.Log) (*DispatchAlreadyLinked, error) {
	event := new(DispatchAlreadyLinked)
	if err := _Dispatch.contract.UnpackLog(event, "AlreadyLinked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Dispatch contract.
type DispatchBeaconUpgradedIterator struct {
	Event *DispatchBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchBeaconUpgraded represents a BeaconUpgraded event raised by the Dispatch contract.
type DispatchBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Dispatch *DispatchFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*DispatchBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &DispatchBeaconUpgradedIterator{contract: _Dispatch.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Dispatch *DispatchFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *DispatchBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchBeaconUpgraded)
				if err := _Dispatch.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Dispatch *DispatchFilterer) ParseBeaconUpgraded(log types.Log) (*DispatchBeaconUpgraded, error) {
	event := new(DispatchBeaconUpgraded)
	if err := _Dispatch.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchLinkIterator is returned from FilterLink and is used to iterate over the raw logs and unpacked data for Link events raised by the Dispatch contract.
type DispatchLinkIterator struct {
	Event *DispatchLink // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchLinkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchLink)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchLink)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchLinkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchLinkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchLink represents a Link event raised by the Dispatch contract.
type DispatchLink struct {
	AgentId   *big.Int
	ScannerId *big.Int
	Enable    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLink is a free log retrieval operation binding the contract event 0xf1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf.
//
// Solidity: event Link(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) FilterLink(opts *bind.FilterOpts) (*DispatchLinkIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "Link")
	if err != nil {
		return nil, err
	}
	return &DispatchLinkIterator{contract: _Dispatch.contract, event: "Link", logs: logs, sub: sub}, nil
}

// WatchLink is a free log subscription operation binding the contract event 0xf1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf.
//
// Solidity: event Link(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) WatchLink(opts *bind.WatchOpts, sink chan<- *DispatchLink) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "Link")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchLink)
				if err := _Dispatch.contract.UnpackLog(event, "Link", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLink is a log parse operation binding the contract event 0xf1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf.
//
// Solidity: event Link(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) ParseLink(log types.Log) (*DispatchLink, error) {
	event := new(DispatchLink)
	if err := _Dispatch.contract.UnpackLog(event, "Link", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the Dispatch contract.
type DispatchRouterUpdatedIterator struct {
	Event *DispatchRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchRouterUpdated represents a RouterUpdated event raised by the Dispatch contract.
type DispatchRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_Dispatch *DispatchFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*DispatchRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &DispatchRouterUpdatedIterator{contract: _Dispatch.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_Dispatch *DispatchFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *DispatchRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchRouterUpdated)
				if err := _Dispatch.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_Dispatch *DispatchFilterer) ParseRouterUpdated(log types.Log) (*DispatchRouterUpdated, error) {
	event := new(DispatchRouterUpdated)
	if err := _Dispatch.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Dispatch contract.
type DispatchUpgradedIterator struct {
	Event *DispatchUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchUpgraded represents a Upgraded event raised by the Dispatch contract.
type DispatchUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Dispatch *DispatchFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*DispatchUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &DispatchUpgradedIterator{contract: _Dispatch.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Dispatch *DispatchFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *DispatchUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchUpgraded)
				if err := _Dispatch.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Dispatch *DispatchFilterer) ParseUpgraded(log types.Log) (*DispatchUpgraded, error) {
	event := new(DispatchUpgraded)
	if err := _Dispatch.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
